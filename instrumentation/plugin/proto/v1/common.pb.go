// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: v1/common.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AnyValue is used to represent any type of attribute value. AnyValue may contain a
// primitive value such as a string or integer or it may contain an arbitrary nested
// object containing arrays, key-value lists and primitives.
type AnyValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The value is one of the listed fields. It is valid for all values to be unspecified
	// in which case this AnyValue is considered to be "empty".
	//
	// Types that are valid to be assigned to Value:
	//
	//	*AnyValue_StringValue
	//	*AnyValue_BoolValue
	//	*AnyValue_IntValue
	//	*AnyValue_DoubleValue
	//	*AnyValue_ArrayValue
	//	*AnyValue_KvlistValue
	//	*AnyValue_BytesValue
	Value         isAnyValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	mi := &file_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValue.ProtoReflect.Descriptor instead.
func (*AnyValue) Descriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *AnyValue) GetValue() isAnyValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AnyValue) GetStringValue() string {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_StringValue); ok {
			return x.StringValue
		}
	}
	return ""
}

func (x *AnyValue) GetBoolValue() bool {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BoolValue); ok {
			return x.BoolValue
		}
	}
	return false
}

func (x *AnyValue) GetIntValue() int64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_IntValue); ok {
			return x.IntValue
		}
	}
	return 0
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_DoubleValue); ok {
			return x.DoubleValue
		}
	}
	return 0
}

func (x *AnyValue) GetArrayValue() *ArrayValue {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_ArrayValue); ok {
			return x.ArrayValue
		}
	}
	return nil
}

func (x *AnyValue) GetKvlistValue() *KeyValueList {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_KvlistValue); ok {
			return x.KvlistValue
		}
	}
	return nil
}

func (x *AnyValue) GetBytesValue() []byte {
	if x != nil {
		if x, ok := x.Value.(*AnyValue_BytesValue); ok {
			return x.BytesValue
		}
	}
	return nil
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type AnyValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AnyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AnyValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type AnyValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type AnyValue_ArrayValue struct {
	ArrayValue *ArrayValue `protobuf:"bytes,5,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type AnyValue_KvlistValue struct {
	KvlistValue *KeyValueList `protobuf:"bytes,6,opt,name=kvlist_value,json=kvlistValue,proto3,oneof"`
}

type AnyValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,7,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*AnyValue_StringValue) isAnyValue_Value() {}

func (*AnyValue_BoolValue) isAnyValue_Value() {}

func (*AnyValue_IntValue) isAnyValue_Value() {}

func (*AnyValue_DoubleValue) isAnyValue_Value() {}

func (*AnyValue_ArrayValue) isAnyValue_Value() {}

func (*AnyValue_KvlistValue) isAnyValue_Value() {}

func (*AnyValue_BytesValue) isAnyValue_Value() {}

// ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
// since oneof in AnyValue does not allow repeated fields.
type ArrayValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Array of values. The array may be empty (contain 0 elements).
	Values        []*AnyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	mi := &file_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *ArrayValue) GetValues() []*AnyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
// since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
// a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
// avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
// are semantically equivalent.
type KeyValueList struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A collection of key/value pairs of key-value pairs. The list may be empty (may
	// contain 0 elements).
	// The keys MUST be unique (it is not allowed to have more than one
	// value with the same key).
	Values        []*KeyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValueList) Reset() {
	*x = KeyValueList{}
	mi := &file_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueList) ProtoMessage() {}

func (x *KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueList.ProtoReflect.Descriptor instead.
func (*KeyValueList) Descriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *KeyValueList) GetValues() []*KeyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// KeyValue is a key-value pair that is used to store resource attributes, Link
// attributes, etc.
type KeyValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *AnyValue              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	mi := &file_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_v1_common_proto protoreflect.FileDescriptor

const file_v1_common_proto_rawDesc = "" +
	"\n" +
	"\x0fv1/common.proto\x12\x1bodigos.io.odiglet.plugin.v1\"\xdc\x02\n" +
	"\bAnyValue\x12#\n" +
	"\fstring_value\x18\x01 \x01(\tH\x00R\vstringValue\x12\x1f\n" +
	"\n" +
	"bool_value\x18\x02 \x01(\bH\x00R\tboolValue\x12\x1d\n" +
	"\tint_value\x18\x03 \x01(\x03H\x00R\bintValue\x12#\n" +
	"\fdouble_value\x18\x04 \x01(\x01H\x00R\vdoubleValue\x12J\n" +
	"\varray_value\x18\x05 \x01(\v2'.odigos.io.odiglet.plugin.v1.ArrayValueH\x00R\n" +
	"arrayValue\x12N\n" +
	"\fkvlist_value\x18\x06 \x01(\v2).odigos.io.odiglet.plugin.v1.KeyValueListH\x00R\vkvlistValue\x12!\n" +
	"\vbytes_value\x18\a \x01(\fH\x00R\n" +
	"bytesValueB\a\n" +
	"\x05value\"K\n" +
	"\n" +
	"ArrayValue\x12=\n" +
	"\x06values\x18\x01 \x03(\v2%.odigos.io.odiglet.plugin.v1.AnyValueR\x06values\"M\n" +
	"\fKeyValueList\x12=\n" +
	"\x06values\x18\x01 \x03(\v2%.odigos.io.odiglet.plugin.v1.KeyValueR\x06values\"Y\n" +
	"\bKeyValue\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12;\n" +
	"\x05value\x18\x02 \x01(\v2%.odigos.io.odiglet.plugin.v1.AnyValueR\x05valueB\x1dZ\x1bodigos.io/odiglet/plugin/v1b\x06proto3"

var (
	file_v1_common_proto_rawDescOnce sync.Once
	file_v1_common_proto_rawDescData []byte
)

func file_v1_common_proto_rawDescGZIP() []byte {
	file_v1_common_proto_rawDescOnce.Do(func() {
		file_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_common_proto_rawDesc), len(file_v1_common_proto_rawDesc)))
	})
	return file_v1_common_proto_rawDescData
}

var file_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_v1_common_proto_goTypes = []any{
	(*AnyValue)(nil),     // 0: odigos.io.odiglet.plugin.v1.AnyValue
	(*ArrayValue)(nil),   // 1: odigos.io.odiglet.plugin.v1.ArrayValue
	(*KeyValueList)(nil), // 2: odigos.io.odiglet.plugin.v1.KeyValueList
	(*KeyValue)(nil),     // 3: odigos.io.odiglet.plugin.v1.KeyValue
}
var file_v1_common_proto_depIdxs = []int32{
	1, // 0: odigos.io.odiglet.plugin.v1.AnyValue.array_value:type_name -> odigos.io.odiglet.plugin.v1.ArrayValue
	2, // 1: odigos.io.odiglet.plugin.v1.AnyValue.kvlist_value:type_name -> odigos.io.odiglet.plugin.v1.KeyValueList
	0, // 2: odigos.io.odiglet.plugin.v1.ArrayValue.values:type_name -> odigos.io.odiglet.plugin.v1.AnyValue
	3, // 3: odigos.io.odiglet.plugin.v1.KeyValueList.values:type_name -> odigos.io.odiglet.plugin.v1.KeyValue
	0, // 4: odigos.io.odiglet.plugin.v1.KeyValue.value:type_name -> odigos.io.odiglet.plugin.v1.AnyValue
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_v1_common_proto_init() }
func file_v1_common_proto_init() {
	if File_v1_common_proto != nil {
		return
	}
	file_v1_common_proto_msgTypes[0].OneofWrappers = []any{
		(*AnyValue_StringValue)(nil),
		(*AnyValue_BoolValue)(nil),
		(*AnyValue_IntValue)(nil),
		(*AnyValue_DoubleValue)(nil),
		(*AnyValue_ArrayValue)(nil),
		(*AnyValue_KvlistValue)(nil),
		(*AnyValue_BytesValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_common_proto_rawDesc), len(file_v1_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_common_proto_goTypes,
		DependencyIndexes: file_v1_common_proto_depIdxs,
		MessageInfos:      file_v1_common_proto_msgTypes,
	}.Build()
	File_v1_common_proto = out.File
	file_v1_common_proto_goTypes = nil
	file_v1_common_proto_depIdxs = nil
}
