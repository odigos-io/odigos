// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/instrumentation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OdigletPluginV1_Attach_FullMethodName      = "/odigos.io.odiglet.plugin.v1.OdigletPluginV1/Attach"
	OdigletPluginV1_ApplyConfig_FullMethodName = "/odigos.io.odiglet.plugin.v1.OdigletPluginV1/ApplyConfig"
	OdigletPluginV1_Detach_FullMethodName      = "/odigos.io.odiglet.plugin.v1.OdigletPluginV1/Detach"
)

// OdigletPluginV1Client is the client API for OdigletPluginV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OdigletPluginV1Client interface {
	Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ApplyConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type odigletPluginV1Client struct {
	cc grpc.ClientConnInterface
}

func NewOdigletPluginV1Client(cc grpc.ClientConnInterface) OdigletPluginV1Client {
	return &odigletPluginV1Client{cc}
}

func (c *odigletPluginV1Client) Attach(ctx context.Context, in *AttachRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdigletPluginV1_Attach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odigletPluginV1Client) ApplyConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdigletPluginV1_ApplyConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *odigletPluginV1Client) Detach(ctx context.Context, in *DetachRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OdigletPluginV1_Detach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OdigletPluginV1Server is the server API for OdigletPluginV1 service.
// All implementations must embed UnimplementedOdigletPluginV1Server
// for forward compatibility.
type OdigletPluginV1Server interface {
	Attach(context.Context, *AttachRequest) (*emptypb.Empty, error)
	ApplyConfig(context.Context, *ConfigRequest) (*emptypb.Empty, error)
	Detach(context.Context, *DetachRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedOdigletPluginV1Server()
}

// UnimplementedOdigletPluginV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOdigletPluginV1Server struct{}

func (UnimplementedOdigletPluginV1Server) Attach(context.Context, *AttachRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (UnimplementedOdigletPluginV1Server) ApplyConfig(context.Context, *ConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyConfig not implemented")
}
func (UnimplementedOdigletPluginV1Server) Detach(context.Context, *DetachRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detach not implemented")
}
func (UnimplementedOdigletPluginV1Server) mustEmbedUnimplementedOdigletPluginV1Server() {}
func (UnimplementedOdigletPluginV1Server) testEmbeddedByValue()                         {}

// UnsafeOdigletPluginV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OdigletPluginV1Server will
// result in compilation errors.
type UnsafeOdigletPluginV1Server interface {
	mustEmbedUnimplementedOdigletPluginV1Server()
}

func RegisterOdigletPluginV1Server(s grpc.ServiceRegistrar, srv OdigletPluginV1Server) {
	// If the following call pancis, it indicates UnimplementedOdigletPluginV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OdigletPluginV1_ServiceDesc, srv)
}

func _OdigletPluginV1_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdigletPluginV1Server).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdigletPluginV1_Attach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdigletPluginV1Server).Attach(ctx, req.(*AttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdigletPluginV1_ApplyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdigletPluginV1Server).ApplyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdigletPluginV1_ApplyConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdigletPluginV1Server).ApplyConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OdigletPluginV1_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OdigletPluginV1Server).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OdigletPluginV1_Detach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OdigletPluginV1Server).Detach(ctx, req.(*DetachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OdigletPluginV1_ServiceDesc is the grpc.ServiceDesc for OdigletPluginV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OdigletPluginV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odigos.io.odiglet.plugin.v1.OdigletPluginV1",
	HandlerType: (*OdigletPluginV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _OdigletPluginV1_Attach_Handler,
		},
		{
			MethodName: "ApplyConfig",
			Handler:    _OdigletPluginV1_ApplyConfig_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _OdigletPluginV1_Detach_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/instrumentation.proto",
}
