// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstrumentationClient is the client API for Instrumentation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstrumentationClient interface {
	Start(ctx context.Context, in *InstrumentationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ApplyConfig(ctx context.Context, in *InstrumentationConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Close(ctx context.Context, in *InstrumentationCloseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type instrumentationClient struct {
	cc grpc.ClientConnInterface
}

func NewInstrumentationClient(cc grpc.ClientConnInterface) InstrumentationClient {
	return &instrumentationClient{cc}
}

func (c *instrumentationClient) Start(ctx context.Context, in *InstrumentationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/odigos.io.instrumentation.plugin.v1.Instrumentation/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentationClient) ApplyConfig(ctx context.Context, in *InstrumentationConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/odigos.io.instrumentation.plugin.v1.Instrumentation/ApplyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instrumentationClient) Close(ctx context.Context, in *InstrumentationCloseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/odigos.io.instrumentation.plugin.v1.Instrumentation/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstrumentationServer is the server API for Instrumentation service.
// All implementations must embed UnimplementedInstrumentationServer
// for forward compatibility
type InstrumentationServer interface {
	Start(context.Context, *InstrumentationRequest) (*emptypb.Empty, error)
	ApplyConfig(context.Context, *InstrumentationConfigRequest) (*emptypb.Empty, error)
	Close(context.Context, *InstrumentationCloseRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedInstrumentationServer()
}

// UnimplementedInstrumentationServer must be embedded to have forward compatible implementations.
type UnimplementedInstrumentationServer struct {
}

func (UnimplementedInstrumentationServer) Start(context.Context, *InstrumentationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedInstrumentationServer) ApplyConfig(context.Context, *InstrumentationConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyConfig not implemented")
}
func (UnimplementedInstrumentationServer) Close(context.Context, *InstrumentationCloseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedInstrumentationServer) mustEmbedUnimplementedInstrumentationServer() {}

// UnsafeInstrumentationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstrumentationServer will
// result in compilation errors.
type UnsafeInstrumentationServer interface {
	mustEmbedUnimplementedInstrumentationServer()
}

func RegisterInstrumentationServer(s grpc.ServiceRegistrar, srv InstrumentationServer) {
	s.RegisterService(&Instrumentation_ServiceDesc, srv)
}

func _Instrumentation_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentationServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odigos.io.instrumentation.plugin.v1.Instrumentation/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentationServer).Start(ctx, req.(*InstrumentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instrumentation_ApplyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentationConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentationServer).ApplyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odigos.io.instrumentation.plugin.v1.Instrumentation/ApplyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentationServer).ApplyConfig(ctx, req.(*InstrumentationConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Instrumentation_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstrumentationCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstrumentationServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odigos.io.instrumentation.plugin.v1.Instrumentation/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstrumentationServer).Close(ctx, req.(*InstrumentationCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Instrumentation_ServiceDesc is the grpc.ServiceDesc for Instrumentation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Instrumentation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odigos.io.instrumentation.plugin.v1.Instrumentation",
	HandlerType: (*InstrumentationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Instrumentation_Start_Handler,
		},
		{
			MethodName: "ApplyConfig",
			Handler:    _Instrumentation_ApplyConfig_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Instrumentation_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/instrumentation.proto",
}
