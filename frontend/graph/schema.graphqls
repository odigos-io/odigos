enum ComputePlatformType {
  K8S
  VM
}

enum K8sResourceKind {
  Deployment
  DaemonSet
  StatefulSet
}

enum ConditionStatus {
  True
  False
  Unknown
}

enum ProgrammingLanguage {
  Unspecified
  Java
  Go
  JavaScript
  Python
  DotNet
}

enum SignalType {
  TRACES
  METRICS
  LOGS
}

enum SpanKind {
  Internal
  Server
  Client
  Producer
  Consumer
}

enum InstallationStatus {
  NEW
  APPS_SELECTED
  FINISHED
}

type SourceContainerRuntimeDetails {
  containerName: String!
  language: String!
  runtimeVersion: String!
  otherAgent: String
}

type Condition {
  status: ConditionStatus!
  type: String!
  reason: String
  message: String
  lastTransitionTime: String
}

type K8sActualNamespace {
  name: String!
  selected: Boolean!
  k8sActualSources: [K8sActualSource]!
}

input K8sDesiredNamespaceInput {
  autoInstrument: Boolean
}

input K8sNamespaceId {
  name: String!
}

type K8sActualSource {
  namespace: String!
  name: String!
  kind: K8sResourceKind!
  numberOfInstances: Int
  selected: Boolean
  reportedName: String
  containers: [SourceContainerRuntimeDetails!]
  conditions: [Condition!]
}

type PaginatedSources {
  nextPage: String!
  items: [K8sActualSource]!
}

input K8sDesiredSourceInput {
  serviceName: String
  autoInstrument: Boolean
}

type PodWorkload {
  namespace: String!
  name: String!
  kind: K8sResourceKind!
}

input PodWorkloadInput {
  namespace: String!
  kind: K8sResourceKind!
  name: String!
}

input K8sSourceId {
  namespace: String!
  kind: K8sResourceKind!
  name: String!
}

type InstrumentationRule {
  ruleId: ID!
  ruleName: String
  notes: String
  disabled: Boolean
  mutable: Boolean!
  profileName: String!
  workloads: [PodWorkload!]
  instrumentationLibraries: [InstrumentationLibraryGlobalId!]
  payloadCollection: PayloadCollection
}

input InstrumentationRuleInput {
  ruleName: String
  notes: String
  disabled: Boolean
  workloads: [PodWorkloadInput!]
  instrumentationLibraries: [InstrumentationLibraryGlobalIdInput!]
  payloadCollection: PayloadCollectionInput
}

type InstrumentationLibraryGlobalId {
  name: String!
  spanKind: SpanKind
  language: ProgrammingLanguage
}

input InstrumentationLibraryGlobalIdInput {
  name: String!
  spanKind: SpanKind
  language: ProgrammingLanguage
}

type PayloadCollection {
  httpRequest: HttpPayloadCollection
  httpResponse: HttpPayloadCollection
  dbQuery: DbQueryPayloadCollection
  messaging: MessagingPayloadCollection
}

input PayloadCollectionInput {
  httpRequest: HttpPayloadCollectionInput
  httpResponse: HttpPayloadCollectionInput
  dbQuery: DbQueryPayloadCollectionInput
  messaging: MessagingPayloadCollectionInput
}

type HttpPayloadCollection {
  mimeTypes: [String]
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

input HttpPayloadCollectionInput {
  mimeTypes: [String]
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

type DbQueryPayloadCollection {
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

input DbQueryPayloadCollectionInput {
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

type MessagingPayloadCollection {
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

input MessagingPayloadCollectionInput {
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

type ApiToken {
  token: String!
  name: String!
  issuedAt: Int!
  expiresAt: Int!
}

type ComputePlatform {
  computePlatformType: ComputePlatformType!
  apiTokens: [ApiToken]!
  k8sActualNamespaces: [K8sActualNamespace]!
  k8sActualNamespace(name: String!): K8sActualNamespace
  sources(nextPage: String!): PaginatedSources!
  destinations: [Destination!]!
  actions: [PipelineAction!]!
  instrumentationRules: [InstrumentationRule!]!
}

type SupportedSignals {
  traces: ObservabilitySignalSupport!
  metrics: ObservabilitySignalSupport!
  logs: ObservabilitySignalSupport!
}

type ObservabilitySignalSupport {
  supported: Boolean!
}

type DestinationTypesCategoryItem {
  type: String!
  displayName: String!
  imageUrl: String!
  supportedSignals: SupportedSignals!
  testConnectionSupported: Boolean!
}

type DestinationsCategory {
  name: String!
  items: [DestinationTypesCategoryItem!]!
}

type GetDestinationTypesResponse {
  categories: [DestinationsCategory!]!
}

type ExportedSignals {
  traces: Boolean!
  metrics: Boolean!
  logs: Boolean!
}

type Destination {
  id: ID!
  name: String!
  type: String!
  exportedSignals: ExportedSignals!
  fields: String!
  destinationType: DestinationTypesCategoryItem!
  conditions: [Condition!]
}

type GetConfigResponse {
  installation: InstallationStatus!
}

type CustomReadDataLabel {
  condition: String!
  title: String!
  value: String!
}

type Field {
  name: String!
  displayName: String!
  componentType: String!
  componentProperties: String! # Using String to store JSON data as a string
  secret: Boolean!
  initialValue: String!
  renderCondition: [String!]!
  hideFromReadData: [String!]!
  customReadDataLabels: [CustomReadDataLabel!]!
}

type GetDestinationDetailsResponse {
  fields: [Field!]!
}

input DestinationInput {
  name: String!
  type: String!
  exportedSignals: ExportedSignalsInput!
  fields: [FieldInput!]!
}

input FieldInput {
  key: String!
  value: String!
}

input ExportedSignalsInput {
  traces: Boolean!
  metrics: Boolean!
  logs: Boolean!
}

input PersistNamespaceItemInput {
  name: String!
  futureSelected: Boolean!
}

input PersistNamespaceSourceInput {
  name: String!
  kind: K8sResourceKind!
  selected: Boolean!
}

type TestConnectionResponse {
  succeeded: Boolean!
  statusCode: Int!
  destinationType: String
  message: String
  reason: String
}

type DestinationDetails {
  type: String!
  urlString: String!
  fields: String!
}

type PipelineAction {
  id: String!
  type: String!
  spec: String!
  conditions: [Condition!]
}

input PatchSourceRequestInput {
  reportedName: String
}

interface Action {
  id: ID!
  type: String!
  name: String
  notes: String
  disable: Boolean!
  signals: [SignalType!]!
}

type ClusterInfo {
  attributeName: String!
  attributeStringValue: String
}

type AddClusterInfoAction implements Action {
  id: ID!
  type: String!
  name: String
  notes: String
  disable: Boolean!
  signals: [SignalType!]!
  details: [ClusterInfo!]!
}

type DeleteAttribute {
  attributeName: String!
}

type DeleteAttributeAction implements Action {
  id: ID!
  type: String!
  name: String
  notes: String
  disable: Boolean!
  signals: [SignalType!]!
  details: [String!]!
}

type PiiMaskingAction implements Action {
  id: ID!
  type: String!
  name: String
  notes: String
  disable: Boolean!
  signals: [SignalType!]!
  details: [String!]
}

type ErrorSamplerAction implements Action {
  id: ID!
  type: String!
  name: String
  notes: String
  disable: Boolean!
  signals: [SignalType!]!
  details: String!
}

type LatencySamplerAction implements Action {
  id: ID!
  type: String!
  name: String
  notes: String
  disable: Boolean!
  signals: [SignalType!]!
  details: [String]!
}

type ProbabilisticSamplerAction implements Action {
  id: ID!
  type: String!
  name: String
  notes: String
  disable: Boolean!
  signals: [SignalType!]!
  details: String!
}

type RenameAttributeAction implements Action {
  id: ID!
  type: String!
  name: String
  notes: String
  disable: Boolean!
  signals: [SignalType!]!
  details: String!
}

input ActionInput {
  type: String!
  name: String
  notes: String
  disable: Boolean!
  signals: [SignalType!]!
  details: String!
}

type OverviewMetricsResponse {
  sources: [SingleSourceMetricsResponse!]!
  destinations: [SingleDestinationMetricsResponse!]!
}

type SingleSourceMetricsResponse {
  namespace: String!
  kind: String!
  name: String!
  totalDataSent: Int!
  throughput: Int!
}

type SingleDestinationMetricsResponse {
  id: String!
  totalDataSent: Int!
  throughput: Int!
}

# describe types
type EntityProperty {
  name: String!
  value: String!
  status: String
  explain: String
}

type InstrumentationLabelsAnalyze {
  instrumented: EntityProperty!
  workload: EntityProperty
  namespace: EntityProperty
  instrumentedText: EntityProperty
}

type ContainerRuntimeInfoAnalyze {
  containerName: EntityProperty!
  language: EntityProperty!
  runtimeVersion: EntityProperty!
  envVars: [EntityProperty!]!
}

type InstrumentationConfigAnalyze {
  created: EntityProperty!
  createTime: EntityProperty
  containers: [ContainerRuntimeInfoAnalyze!]!
}

type RuntimeInfoAnalyze {
  generation: EntityProperty!
  containers: [ContainerRuntimeInfoAnalyze!]!
}

type ContainerWorkloadManifestAnalyze {
  containerName: EntityProperty!
  devices: EntityProperty!
  originalEnv: [EntityProperty!]!
}

type InstrumentationDeviceAnalyze {
  statusText: EntityProperty!
  containers: [ContainerWorkloadManifestAnalyze!]!
}

type InstrumentationInstanceAnalyze {
  healthy: EntityProperty!
  message: EntityProperty
  identifyingAttributes: [EntityProperty!]!
}

type PodContainerAnalyze {
  containerName: EntityProperty!
  actualDevices: EntityProperty!
  instrumentationInstances: [InstrumentationInstanceAnalyze!]!
}

type PodAnalyze {
  podName: EntityProperty!
  nodeName: EntityProperty!
  phase: EntityProperty!
  containers: [PodContainerAnalyze!]!
}

type SourceAnalyze {
  name: EntityProperty!
  kind: EntityProperty!
  namespace: EntityProperty!
  labels: InstrumentationLabelsAnalyze!

  runtimeInfo: RuntimeInfoAnalyze!
  instrumentationConfig: InstrumentationConfigAnalyze!
  instrumentationDevice: InstrumentationDeviceAnalyze!

  totalPods: Int!
  podsPhasesCount: String!
  pods: [PodAnalyze!]!
}

type ClusterCollectorAnalyze {
  enabled: EntityProperty!
  collectorGroup: EntityProperty!
  deployed: EntityProperty
  deployedError: EntityProperty
  collectorReady: EntityProperty
  deploymentCreated: EntityProperty!
  expectedReplicas: EntityProperty
  healthyReplicas: EntityProperty
  failedReplicas: EntityProperty
  failedReplicasReason: EntityProperty
}

type NodeCollectorAnalyze {
  enabled: EntityProperty!
  collectorGroup: EntityProperty!
  deployed: EntityProperty
  deployedError: EntityProperty
  collectorReady: EntityProperty
  daemonSet: EntityProperty!
  desiredNodes: EntityProperty
  currentNodes: EntityProperty
  updatedNodes: EntityProperty
  availableNodes: EntityProperty
}

type OdigosAnalyze {
  odigosVersion: EntityProperty!
  tier: EntityProperty!
  installationMethod: EntityProperty!
  numberOfDestinations: Int!
  numberOfSources: Int!
  clusterCollector: ClusterCollectorAnalyze!
  nodeCollector: NodeCollectorAnalyze!
  isSettled: Boolean!
  hasErrors: Boolean!
}

type Query {
  computePlatform: ComputePlatform
  config: GetConfigResponse
  destinationTypes: GetDestinationTypesResponse
  destinationTypeDetails(type: String!): GetDestinationDetailsResponse
  potentialDestinations: [DestinationDetails!]!
  getOverviewMetrics: OverviewMetricsResponse!
  describeOdigos: OdigosAnalyze!
  describeSource(namespace: String!, kind: String!, name: String!): SourceAnalyze!
}

type Mutation {
  updateApiToken(token: String!): Boolean!

  persistK8sNamespace(namespace: PersistNamespaceItemInput!): Boolean!

  persistK8sSources(namespace: String!, sources: [PersistNamespaceSourceInput!]!): Boolean!
  updateK8sActualSource(sourceId: K8sSourceId!, patchSourceRequest: PatchSourceRequestInput!): Boolean!

  createNewDestination(destination: DestinationInput!): Destination!
  updateDestination(id: ID!, destination: DestinationInput!): Destination!
  deleteDestination(id: ID!): Boolean!
  testConnectionForDestination(destination: DestinationInput!): TestConnectionResponse!

  createAction(action: ActionInput!): Action!
  updateAction(id: ID!, action: ActionInput!): Action!
  deleteAction(id: ID!, actionType: String!): Boolean!

  createInstrumentationRule(instrumentationRule: InstrumentationRuleInput!): InstrumentationRule!
  updateInstrumentationRule(ruleId: ID!, instrumentationRule: InstrumentationRuleInput!): InstrumentationRule!
  deleteInstrumentationRule(ruleId: ID!): Boolean!
}
