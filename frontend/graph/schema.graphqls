enum ComputePlatformType {
  K8S
  VM
}

enum K8sResourceKind {
  Deployment
  DaemonSet
  StatefulSet
  CronJob
}

enum ConditionStatus {
  success
  error
  disabled
  loading
}

enum ProgrammingLanguage {
  Unspecified
  Java
  Go
  JavaScript
  Python
  DotNet
}

enum SignalType {
  TRACES
  traces
  METRICS
  metrics
  LOGS
  logs
}

enum SpanKind {
  Internal
  Server
  Client
  Producer
  Consumer
}

enum InstallationStatus {
  NEW
  APPS_SELECTED
  FINISHED
}

enum Tier {
  community
  cloud
  onprem
}

enum ActionType {
  K8sAttributesResolver
  AddClusterInfo
  DeleteAttribute
  RenameAttribute
  PiiMasking
  ErrorSampler
  ProbabilisticSampler
  LatencySampler
  ServiceNameSampler
  SpanAttributeSampler
  UnknownType
}

enum InstrumentationRuleType {
  CodeAttributes
  HeadersCollection
  PayloadCollection
  CustomInstrumentation
  UnknownType
}

type OdigosConfiguration {
  karpenterEnabled: Boolean
  allowConcurrentAgents: Boolean
  uiPaginationLimit: Int
  centralBackendURL: String
  oidc: OidcConfiguration
  clusterName: String
  imagePrefix: String
  ignoredNamespaces: [String]
  ignoredContainers: [String]
  profiles: [String]
  mountMethod: String
  agentEnvVarsInjectionMethod: String
  customContainerRuntimeSocketPath: String
  odigletHealthProbeBindPort: Int
  rollbackDisabled: Boolean
  rollbackGraceTime: String
  rollbackStabilityWindow: String
  rollout: RolloutConfiguration
  collectorNode: CollectorNode
  collectorGateway: CollectorGateway
  nodeSelector: String # JSON string representation of key-value pairs
}

type OidcConfiguration {
  tenantUrl: String
  clientId: String
  clientSecret: String
}

type RolloutConfiguration {
  automaticRolloutDisabled: Boolean
}

type CollectorNode {
  collectorOwnMetricsPort: Int
  requestMemoryMiB: Int
  limitMemoryMiB: Int
  requestCPUm: Int
  limitCPUm: Int
  memoryLimiterLimitMiB: Int
  memoryLimiterSpikeLimitMiB: Int
  goMemLimitMiB: Int
  k8sNodeLogsDirectory: String
}

type CollectorGateway {
  requestMemoryMiB: Int
  limitMemoryMiB: Int
  requestCPUm: Int
  limitCPUm: Int
  memoryLimiterLimitMiB: Int
  memoryLimiterSpikeLimitMiB: Int
  goMemLimitMiB: Int
  minReplicas: Int
  maxReplicas: Int
}

input OdigosConfigurationInput {
  karpenterEnabled: Boolean
  allowConcurrentAgents: Boolean
  uiPaginationLimit: Int
  centralBackendURL: String
  oidc: OidcConfigurationInput
  clusterName: String
  imagePrefix: String
  ignoredNamespaces: [String]
  ignoredContainers: [String]
  profiles: [String]
  mountMethod: String
  agentEnvVarsInjectionMethod: String
  customContainerRuntimeSocketPath: String
  odigletHealthProbeBindPort: Int
  rollbackDisabled: Boolean
  rollbackGraceTime: String
  rollbackStabilityWindow: String
  rollout: RolloutConfigurationInput
  collectorNode: CollectorNodeInput
  collectorGateway: CollectorGatewayInput
  nodeSelector: String # JSON string representation of language mappings
}

input OidcConfigurationInput {
  tenantUrl: String
  clientId: String
  clientSecret: String
}

input RolloutConfigurationInput {
  automaticRolloutDisabled: Boolean
}

input CollectorNodeInput {
  collectorOwnMetricsPort: Int
  requestMemoryMiB: Int
  limitMemoryMiB: Int
  requestCPUm: Int
  limitCPUm: Int
  memoryLimiterLimitMiB: Int
  memoryLimiterSpikeLimitMiB: Int
  goMemLimitMiB: Int
  k8sNodeLogsDirectory: String
}

input CollectorGatewayInput {
  requestMemoryMiB: Int
  limitMemoryMiB: Int
  requestCPUm: Int
  limitCPUm: Int
  memoryLimiterLimitMiB: Int
  memoryLimiterSpikeLimitMiB: Int
  goMemLimitMiB: Int
  minReplicas: Int
  maxReplicas: Int
}

type SourceContainer {
  containerName: String!
  language: String!
  runtimeVersion: String!
  overriden: Boolean!
  instrumented: Boolean!
  instrumentationMessage: String!
  otelDistroName: String
}

type Condition {
  status: ConditionStatus!
  type: String!
  reason: String
  message: String
  lastTransitionTime: String
}

type K8sActualNamespace {
  name: String!
  selected: Boolean!
  dataStreamNames: [String]!
  sources: [K8sActualSource]!
}

input K8sDesiredNamespaceInput {
  autoInstrument: Boolean
}

input K8sNamespaceId {
  name: String!
}

type K8sActualSource {
  namespace: String!
  name: String!
  kind: K8sResourceKind!
  dataStreamNames: [String]!
  numberOfInstances: Int
  selected: Boolean
  otelServiceName: String
  containers: [SourceContainer!]
  conditions: [Condition!]
  workloadOdigosHealthStatus: DesiredConditionStatus
}

input K8sDesiredSourceInput {
  serviceName: String
  autoInstrument: Boolean
}

type PodWorkload {
  namespace: String!
  name: String!
  kind: K8sResourceKind!
}

input PodWorkloadInput {
  namespace: String!
  kind: K8sResourceKind!
  name: String!
}

input K8sSourceId {
  namespace: String!
  kind: K8sResourceKind!
  name: String!
}

type InstrumentationRule {
  type: InstrumentationRuleType!
  ruleId: ID!
  ruleName: String
  notes: String
  disabled: Boolean
  mutable: Boolean!
  profileName: String!
  workloads: [PodWorkload!]
  instrumentationLibraries: [InstrumentationLibraryGlobalId!]
  conditions: [Condition!]
  codeAttributes: CodeAttributes
  headersCollection: HeadersCollection
  payloadCollection: PayloadCollection
  customInstrumentations: CustomInstrumentations
}

input InstrumentationRuleInput {
  ruleName: String
  notes: String
  disabled: Boolean
  workloads: [PodWorkloadInput!]
  instrumentationLibraries: [InstrumentationLibraryGlobalIdInput!]
  codeAttributes: CodeAttributesInput
  headersCollection: HeadersCollectionInput
  payloadCollection: PayloadCollectionInput
  customInstrumentations: CustomInstrumentationsInput
}

type InstrumentationLibraryGlobalId {
  name: String!
  spanKind: SpanKind
  language: ProgrammingLanguage
}

input InstrumentationLibraryGlobalIdInput {
  name: String!
  spanKind: SpanKind
  language: ProgrammingLanguage
}

type HeadersCollection {
  headerKeys: [String]
}

#### CUSTOM PROBES ####
type CustomInstrumentations {
  golang: [GolangCustomProbe]
  java: [JavaCustomProbe]
}

type GolangCustomProbe {
  packageName: String
  functionName: String
  receiverName: String
  receiverMethodName: String
}

type JavaCustomProbe {
  className: String
  methodName: String
}

input CustomInstrumentationsInput {
  golang: [GolangCustomProbeInput]
  java: [JavaCustomProbeInput]
}

input GolangCustomProbeInput {
  packageName: String
  functionName: String
  receiverName: String
  receiverMethodName: String
}

input JavaCustomProbeInput {
  className: String
  methodName: String
}
#### END CUSTOM PROBES ####

input HeadersCollectionInput {
  headerKeys: [String]
}

type HttpPayloadCollection {
  mimeTypes: [String]
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

input HttpPayloadCollectionInput {
  mimeTypes: [String]
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

type DbQueryPayloadCollection {
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

input DbQueryPayloadCollectionInput {
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

type MessagingPayloadCollection {
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

input MessagingPayloadCollectionInput {
  maxPayloadLength: Int
  dropPartialPayloads: Boolean
}

type CodeAttributes {
  column: Boolean
  filePath: Boolean
  function: Boolean
  lineNumber: Boolean
  namespace: Boolean
  stacktrace: Boolean
}

input CodeAttributesInput {
  column: Boolean
  filePath: Boolean
  function: Boolean
  lineNumber: Boolean
  namespace: Boolean
  stacktrace: Boolean
}

type PayloadCollection {
  httpRequest: HttpPayloadCollection
  httpResponse: HttpPayloadCollection
  dbQuery: DbQueryPayloadCollection
  messaging: MessagingPayloadCollection
}

input PayloadCollectionInput {
  httpRequest: HttpPayloadCollectionInput
  httpResponse: HttpPayloadCollectionInput
  dbQuery: DbQueryPayloadCollectionInput
  messaging: MessagingPayloadCollectionInput
}

type ApiToken {
  token: String!
  name: String!
  issuedAt: Int!
  expiresAt: Int!
}

type ComputePlatform {
  computePlatformType: ComputePlatformType!
  apiTokens: [ApiToken]!
  k8sActualNamespaces: [K8sActualNamespace]!
  k8sActualNamespace(name: String!): K8sActualNamespace
  sources: [K8sActualSource!]!
  source(sourceId: K8sSourceId!): K8sActualSource!
  destinations: [Destination!]!
  actions: [Action!]!
  instrumentationRules: [InstrumentationRule!]!
  dataStreams: [DataStream!]!
}

type SupportedSignals {
  traces: ObservabilitySignalSupport!
  metrics: ObservabilitySignalSupport!
  logs: ObservabilitySignalSupport!
}

type ObservabilitySignalSupport {
  supported: Boolean!
}

type CustomReadDataLabel {
  condition: String!
  title: String!
  value: String!
}

type DestinationFieldYamlProperties {
  name: String!
  displayName: String!
  componentType: String!
  componentProperties: String! # Using String to store JSON data as a string
  secret: Boolean!
  initialValue: String!
  renderCondition: [String!]!
  hideFromReadData: [String!]!
  customReadDataLabels: [CustomReadDataLabel!]!
}

type DestinationTypesCategoryItem {
  type: String!
  displayName: String!
  imageUrl: String!
  supportedSignals: SupportedSignals!
  testConnectionSupported: Boolean!
  fields: [DestinationFieldYamlProperties!]!
}

type DestinationsCategory {
  name: String!
  description: String!
  items: [DestinationTypesCategoryItem!]!
}

type GetDestinationCategories {
  categories: [DestinationsCategory!]!
}

type ExportedSignals {
  traces: Boolean!
  metrics: Boolean!
  logs: Boolean!
}

type Destination {
  id: ID!
  type: String!
  name: String!
  disabled: Boolean!
  dataStreamNames: [String]!
  exportedSignals: ExportedSignals!
  fields: String!
  destinationType: DestinationTypesCategoryItem!
  conditions: [Condition!]
}

type GetConfigResponse {
  readonly: Boolean!
  tier: Tier!
  installationMethod: String!
  installationStatus: InstallationStatus!
}

input DestinationInput {
  name: String!
  type: String!
  currentStreamName: String!
  exportedSignals: ExportedSignalsInput!
  fields: [FieldInput!]!
  disabled: Boolean
}

input FieldInput {
  key: String!
  value: String!
}

input ExportedSignalsInput {
  traces: Boolean!
  metrics: Boolean!
  logs: Boolean!
}

input PersistNamespaceItemInput {
  namespace: String!
  selected: Boolean!
  currentStreamName: String!
}

input PersistNamespaceSourceInput {
  namespace: String!
  name: String!
  kind: K8sResourceKind!
  selected: Boolean!
  currentStreamName: String!
}

type TestConnectionResponse {
  succeeded: Boolean!
  statusCode: Int!
  destinationType: String
  message: String
  reason: String
}

type DestinationDetails {
  type: String!
  urlString: String!
  fields: String!
}

input PatchSourceRequestInput {
  currentStreamName: String!
  otelServiceName: String
  # for runtime override
  containerName: String
  language: String
  version: String
}

input ActionInput {
  type: ActionType!
  name: String
  notes: String
  disabled: Boolean!
  signals: [SignalType!]!
  fields: ActionFieldsInput!
}

input ActionFieldsInput {
  collectContainerAttributes: Boolean
  collectReplicaSetAttributes: Boolean
  collectWorkloadId: Boolean
  collectClusterId: Boolean
  labelsAttributes: [K8sLabelAttributeInput!]
  annotationsAttributes: [K8sAnnotationAttributeInput!]

  clusterAttributes: [ClusterAttributeInput!]
  overwriteExistingValues: Boolean
  attributeNamesToDelete: [String!]
  renames: String
  piiCategories: [String!]

  samplingPercentage: String
  fallbackSamplingRatio: Int
  endpointsFilters: [HttpRouteFilterInput!]
  servicesNameFilters: [ServiceNameFilterInput!]
  attributeFilters: [SpanAttributeFilterInput!]
}

input K8sLabelAttributeInput {
  labelKey: String!
  attributeKey: String!
  from: K8sAttributesFrom
}

input K8sAnnotationAttributeInput {
  annotationKey: String!
  attributeKey: String!
  from: K8sAttributesFrom
}

input ClusterAttributeInput {
  attributeName: String!
  attributeStringValue: String!
}

input HttpRouteFilterInput {
  httpRoute: String!
  serviceName: String!
  minimumLatencyThreshold: Int!
  fallbackSamplingRatio: Float!
}

input ServiceNameFilterInput {
  serviceName: String!
  samplingRatio: Float!
  fallbackSamplingRatio: Float!
}

input SpanAttributeFilterInput {
  serviceName: String!
  attributeKey: String!
  fallbackSamplingRatio: Float!
  condition: AttributeFiltersConditionInput!
}

input StringConditionInput {
  operation: StringOperation!
  expectedValue: String
}
input NumberConditionInput {
  operation: NumberOperation!
  expectedValue: Float!
}
input BooleanConditionInput {
  operation: BooleanOperation!
  expectedValue: Boolean!
}
input JsonConditionInput {
  operation: JsonOperation!
  expectedValue: String
  jsonPath: String
}

input AttributeFiltersConditionInput {
  stringCondition: StringConditionInput
  numberCondition: NumberConditionInput
  booleanCondition: BooleanConditionInput
  jsonCondition: JsonConditionInput
}

type Action {
  id: ID!
  type: ActionType!
  name: String
  notes: String
  disabled: Boolean!
  signals: [SignalType!]!
  fields: ActionFields!
  conditions: [Condition!]
}

type ActionFields {
  collectContainerAttributes: Boolean
  collectReplicaSetAttributes: Boolean
  collectWorkloadId: Boolean
  collectClusterId: Boolean
  labelsAttributes: [K8sLabelAttribute!]
  annotationsAttributes: [K8sAnnotationAttribute!]

  clusterAttributes: [ClusterAttribute!]
  overwriteExistingValues: Boolean
  attributeNamesToDelete: [String!]
  renames: String
  piiCategories: [String!]

  samplingPercentage: String
  fallbackSamplingRatio: Int
  endpointsFilters: [HttpRouteFilter!]
  servicesNameFilters: [ServiceNameFilter!]
  attributeFilters: [SpanAttributeFilter!]
}

type K8sLabelAttribute {
  labelKey: String!
  attributeKey: String!
  from: K8sAttributesFrom
}

type K8sAnnotationAttribute {
  annotationKey: String!
  attributeKey: String!
  from: K8sAttributesFrom
}

type ClusterAttribute {
  attributeName: String!
  attributeStringValue: String!
}

type HttpRouteFilter {
  httpRoute: String!
  serviceName: String!
  minimumLatencyThreshold: Int!
  fallbackSamplingRatio: Float!
}

type ServiceNameFilter {
  serviceName: String!
  samplingRatio: Float!
  fallbackSamplingRatio: Float!
}

type SpanAttributeFilter {
  serviceName: String!
  attributeKey: String!
  condition: AttributeFiltersCondition!
  samplingRatio: Float!
  fallbackSamplingRatio: Float!
}

enum StringOperation {
  exists
  equals
  not_equals
  contains
  not_contains
  regex
}
enum K8sAttributesFrom {
  pod
  namespace
}
enum NumberOperation {
  exists
  equals
  not_equals
  greater_than
  less_than
  greater_than_or_equal
  less_than_or_equal
}
enum BooleanOperation {
  exists
  equals
}
enum JsonOperation {
  exists
  equals
  not_equals
  is_valid_json
  is_invalid_json
  jsonpath_exists
  key_equals
  key_not_equals
}

type StringCondition {
  operation: StringOperation!
  expectedValue: String
}
type NumberCondition {
  operation: NumberOperation!
  expectedValue: Float!
}
type BooleanCondition {
  operation: BooleanOperation!
  expectedValue: Boolean!
}
type JsonCondition {
  operation: JsonOperation!
  expectedValue: String
  jsonPath: String
}

type AttributeFiltersCondition {
  stringCondition: StringCondition
  numberCondition: NumberCondition
  booleanCondition: BooleanCondition
  jsonCondition: JsonCondition
}

type AttributeFilters {
  serviceName: String!
  attributeKey: String!
  fallbackSamplingRatio: Float!
  condition: AttributeFiltersCondition!
}

type OverviewMetricsResponse {
  sources: [SingleSourceMetricsResponse!]!
  destinations: [SingleDestinationMetricsResponse!]!
}

type SingleSourceMetricsResponse {
  namespace: String!
  kind: String!
  name: String!
  totalDataSent: Int!
  throughput: Int!
}

type SingleDestinationMetricsResponse {
  id: String!
  totalDataSent: Int!
  throughput: Int!
}

# describe types
type EntityProperty {
  name: String!
  value: String!
  status: String
  explain: String
}

type InstrumentationSourcesAnalyze {
  instrumented: EntityProperty!
  workload: EntityProperty
  namespace: EntityProperty
  instrumentedText: EntityProperty
}

type ContainerRuntimeInfoAnalyze {
  containerName: EntityProperty!
  language: EntityProperty!
  runtimeVersion: EntityProperty!
  envVars: [EntityProperty!]!
}

type RuntimeInfoAnalyze {
  generation: EntityProperty!
  containers: [ContainerRuntimeInfoAnalyze!]!
}

type ContainerAgentConfigAnalyze {
  containerName: EntityProperty!
  agentEnabled: EntityProperty!
  reason: EntityProperty
  message: EntityProperty
  otelDistroName: EntityProperty
}

type OtelAgentsAnalyze {
  created: EntityProperty!
  createTime: EntityProperty
  containers: [ContainerAgentConfigAnalyze!]!
}

type InstrumentationInstanceAnalyze {
  healthy: EntityProperty!
  message: EntityProperty
  identifyingAttributes: [EntityProperty!]!
}

type PodContainerAnalyze {
  containerName: EntityProperty!
  actualDevices: EntityProperty!
  started: EntityProperty
  ready: EntityProperty
  instrumentationInstances: [InstrumentationInstanceAnalyze!]!
}

type PodAnalyze {
  podName: EntityProperty!
  nodeName: EntityProperty!
  phase: EntityProperty!
  agentInjected: EntityProperty!
  runningLatestWorkloadRevision: EntityProperty
  containers: [PodContainerAnalyze!]!
}

type SourceAnalyze {
  name: EntityProperty!
  kind: EntityProperty!
  namespace: EntityProperty!
  sourceObjects: InstrumentationSourcesAnalyze!

  runtimeInfo: RuntimeInfoAnalyze!
  otelAgents: OtelAgentsAnalyze!

  totalPods: Int!
  podsPhasesCount: String!
  pods: [PodAnalyze!]!
}

type ClusterCollectorAnalyze {
  enabled: EntityProperty!
  collectorGroup: EntityProperty!
  deployed: EntityProperty
  deployedError: EntityProperty
  collectorReady: EntityProperty
  deploymentCreated: EntityProperty!
  expectedReplicas: EntityProperty
  healthyReplicas: EntityProperty
  failedReplicas: EntityProperty
  failedReplicasReason: EntityProperty
}

type NodeCollectorAnalyze {
  enabled: EntityProperty!
  collectorGroup: EntityProperty!
  deployed: EntityProperty
  deployedError: EntityProperty
  collectorReady: EntityProperty
  daemonSet: EntityProperty!
  desiredNodes: EntityProperty
  currentNodes: EntityProperty
  updatedNodes: EntityProperty
  availableNodes: EntityProperty
}

type OdigosAnalyze {
  odigosVersion: EntityProperty!
  kubernetesVersion: EntityProperty!
  tier: EntityProperty!
  installationMethod: EntityProperty!
  numberOfDestinations: Int!
  numberOfSources: Int!
  clusterCollector: ClusterCollectorAnalyze!
  nodeCollector: NodeCollectorAnalyze!
  isSettled: Boolean!
  hasErrors: Boolean!
}

type SourceConditions {
  namespace: String!
  name: String!
  kind: K8sResourceKind!
  conditions: [Condition!]!
}

type DataStream {
  name: String!
}

input DataStreamInput {
  name: String!
}

type ServiceMap {
  services: [ServiceMapFromSource!]!
}

type ServiceMapFromSource {
  serviceName: String!
  services: [ServiceMapToSource!]!
}

type ServiceMapToSource {
  serviceName: String!
  requests: Int!
  dateTime: String!
}

type NonIdentifyingAttribute {
  key: String!
  value: String!
}

type InstrumentationInstanceComponent {
  name: String!
  nonIdentifyingAttributes: [NonIdentifyingAttribute!]!
}

type Query {
  computePlatform: ComputePlatform
  config: GetConfigResponse
  odigosConfig: OdigosConfiguration

  destinationCategories: GetDestinationCategories
  potentialDestinations: [DestinationDetails!]!

  getOverviewMetrics: OverviewMetricsResponse!
  getServiceMap: ServiceMap!

  describeOdigos: OdigosAnalyze!
  describeSource(
    namespace: String!
    kind: String!
    name: String!
  ): SourceAnalyze!

  # source conditions (from instance, workload, etc.)
  sourceConditions: [SourceConditions!]!

  # source libraries
  instrumentationInstanceComponents(
    namespace: String!
    kind: String!
    name: String!
  ): [InstrumentationInstanceComponent!]!

  # get all sources that match the filter
  workloads(filter: WorkloadFilter): [K8sWorkload!]!
}

type Mutation {
  updateApiToken(token: String!): Boolean!
  updateOdigosConfig(odigosConfig: OdigosConfigurationInput!): Boolean!
  uninstrumentCluster: Boolean!
  persistK8sNamespaces(namespaces: [PersistNamespaceItemInput!]!): Boolean!
  persistK8sSources(sources: [PersistNamespaceSourceInput!]!): Boolean!
  updateK8sActualSource(
    sourceId: K8sSourceId!
    patchSourceRequest: PatchSourceRequestInput!
  ): Boolean!
  createNewDestination(destination: DestinationInput!): Destination!
  updateDestination(id: ID!, destination: DestinationInput!): Destination!
  deleteDestination(id: ID!, currentStreamName: String!): Boolean!
  testConnectionForDestination(
    destination: DestinationInput!
  ): TestConnectionResponse!
  createAction(action: ActionInput!): Action!
  updateAction(id: ID!, action: ActionInput!): Action!
  deleteAction(id: ID!, actionType: String!): Boolean!
  createInstrumentationRule(
    instrumentationRule: InstrumentationRuleInput!
  ): InstrumentationRule!
  updateInstrumentationRule(
    ruleId: ID!
    instrumentationRule: InstrumentationRuleInput!
  ): InstrumentationRule!
  deleteInstrumentationRule(ruleId: ID!): Boolean!
  updateDataStream(id: ID!, dataStream: DataStreamInput!): DataStream!
  deleteDataStream(id: ID!): Boolean!
  restartWorkloads(sourceIds: [K8sSourceId!]!): Boolean!
}
