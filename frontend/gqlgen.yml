# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/*.graphqls

# Where should the generated server code go?
exec:
  filename: graph/generated.go
  package: graph

# Uncomment to enable federation
# federation:
#   filename: graph/federation.go
#   package: graph

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph
  package: graph
  filename_template: '{name}.resolvers.go'

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - 'github.com/odigos-io/odigos/frontend/graph/model'

models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32

  ComputePlatform:
    fields:
      k8sActualNamespace:
        resolver: true
      k8sActualNamespaces:
        resolver: true
      k8sActualSource:
        resolver: true
      destinations:
        resolver: true
      actions:
        resolver: true
      k8sActualSources:
        resolver: true
      instrumentationRules:
        resolver: true
  K8sActualNamespace:
    fields:
      k8sActualSources:
        resolver: true
