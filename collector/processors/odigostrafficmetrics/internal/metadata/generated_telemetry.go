// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"errors"

	"go.opentelemetry.io/otel/metric"
	noopmetric "go.opentelemetry.io/otel/metric/noop"
	"go.opentelemetry.io/otel/trace"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/config/configtelemetry"
)

func Meter(settings component.TelemetrySettings) metric.Meter {
	return settings.MeterProvider.Meter("github.com/open-telemetry/opentelemetry-collector-contrib/odigos/processor/odigostrafficmetrics")
}

func Tracer(settings component.TelemetrySettings) trace.Tracer {
	return settings.TracerProvider.Tracer("github.com/open-telemetry/opentelemetry-collector-contrib/odigos/processor/odigostrafficmetrics")
}

// TelemetryBuilder provides an interface for components to report telemetry
// as defined in metadata and user config.
type TelemetryBuilder struct {
	meter                      metric.Meter
	OdigosAcceptedLogRecords   metric.Int64Counter
	OdigosAcceptedMetricPoints metric.Int64Counter
	OdigosAcceptedSpans        metric.Int64Counter
	OdigosLogDataSize          metric.Int64Counter
	OdigosMetricDataSize       metric.Int64Counter
	OdigosTraceDataSize        metric.Int64Counter
}

// TelemetryBuilderOption applies changes to default builder.
type TelemetryBuilderOption interface {
	apply(*TelemetryBuilder)
}

type telemetryBuilderOptionFunc func(mb *TelemetryBuilder)

func (tbof telemetryBuilderOptionFunc) apply(mb *TelemetryBuilder) {
	tbof(mb)
}

// NewTelemetryBuilder provides a struct with methods to update all internal telemetry
// for a component
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...TelemetryBuilderOption) (*TelemetryBuilder, error) {
	builder := TelemetryBuilder{}
	for _, op := range options {
		op.apply(&builder)
	}
	builder.meter = Meter(settings)
	var err, errs error
	builder.OdigosAcceptedLogRecords, err = getLeveledMeter(builder.meter, configtelemetry.LevelBasic, settings.MetricsLevel).Int64Counter(
		"otelcol_odigos_accepted_log_records",
		metric.WithDescription("Number of log records passed through the processor."),
		metric.WithUnit("{records}"),
	)
	errs = errors.Join(errs, err)
	builder.OdigosAcceptedMetricPoints, err = getLeveledMeter(builder.meter, configtelemetry.LevelBasic, settings.MetricsLevel).Int64Counter(
		"otelcol_odigos_accepted_metric_points",
		metric.WithDescription("Number of data points passed through the processor."),
		metric.WithUnit("{datapoints}"),
	)
	errs = errors.Join(errs, err)
	builder.OdigosAcceptedSpans, err = getLeveledMeter(builder.meter, configtelemetry.LevelBasic, settings.MetricsLevel).Int64Counter(
		"otelcol_odigos_accepted_spans",
		metric.WithDescription("Number of spans passed through the processor."),
		metric.WithUnit("{spans}"),
	)
	errs = errors.Join(errs, err)
	builder.OdigosLogDataSize, err = getLeveledMeter(builder.meter, configtelemetry.LevelBasic, settings.MetricsLevel).Int64Counter(
		"otelcol_odigos_log_data_size",
		metric.WithDescription("Total size of log data passed to the processor"),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.OdigosMetricDataSize, err = getLeveledMeter(builder.meter, configtelemetry.LevelBasic, settings.MetricsLevel).Int64Counter(
		"otelcol_odigos_metric_data_size",
		metric.WithDescription("Total size of metric data passed to the processor"),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	builder.OdigosTraceDataSize, err = getLeveledMeter(builder.meter, configtelemetry.LevelBasic, settings.MetricsLevel).Int64Counter(
		"otelcol_odigos_trace_data_size",
		metric.WithDescription("Total size of trace data passed to the processor"),
		metric.WithUnit("By"),
	)
	errs = errors.Join(errs, err)
	return &builder, errs
}

func getLeveledMeter(meter metric.Meter, cfgLevel, srvLevel configtelemetry.Level) metric.Meter {
	if cfgLevel <= srvLevel {
		return meter
	}
	return noopmetric.Meter{}
}
