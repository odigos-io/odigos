apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: workflow-lifecycle
spec:
  description: This e2e test runs various scenarios to test the lifecycle of the workload
  skipDelete: true
  steps:
    - name: Prepare destination
      try:
        - apply:
            file: ../../common/apply/simple-trace-db-deployment.yaml
    - name: Install Odigos
      try:
        - script:
            content: |
              ../../../cli/odigos install --namespace odigos-test --version e2e-test
              ../../common/verify_odigos_installation.sh odigos-test
            timeout: 4m
        - assert:
            timeout: 3m
            file: ../../common/assert/odigos-installed.yaml
    - name: Verify Node Odiglet label has been added
      try:
        - assert:
            file: ../../common/assert/node-odiglet-label.yaml
    - name: Assert Trace DB is up
      try:
        - assert:
            timeout: 1m
            file: ../../common/assert/simple-trace-db-running.yaml
    - name: '01 - Install Test Apps'
      try:
        - apply:
            file: 01-install-test-apps.yaml
    - name: '01 - Assert Apps installed'
      try:
        - assert:
            timeout: 150s
            file: 01-assert-apps-installed.yaml
    - name: '01 Instrument Namespaces'
      try:
        - apply:
            file: ../../common/apply/instrument-default-ns.yaml
    - name: '01 Assert runtime detection'
      try:
        - assert:
            file: 01-assert-runtime-detected.yaml
    - name: '01 Add Destination'
      try:
        - apply:
            file: ../../common/apply/add-simple-trace-db-destination.yaml
    - name: '01 Assert Pipeline'
      try:
        - assert:
            timeout: 1m
            file: ../../common/assert/pipeline-ready.yaml

    - name: '01 Assert Instrumented'
      try:
        - assert:
            timeout: 3m
            file: 01-assert-instrumented.yaml

    - name: '01 Assert Workloads'
      try:
        - assert:
            file: 01-assert-workloads.yaml

    - name: '01 - Generate Traffic'
      # at this point, we know the expected services are instrumented because we asserted the instrumentation instance
      # send traffic to all services to verify they are working as expected and verify traces for instrumented ones
      try:
        - script:
            timeout: 200s
            content: |
              set -e

              NAMESPACE="default"
              DEPLOYMENTS=$(kubectl get deployments -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}')


              for DEPLOYMENT in $DEPLOYMENTS; do
              echo "Waiting for deployment $DEPLOYMENT to finish rollout..."
              kubectl rollout status deployment/$DEPLOYMENT -n $NAMESPACE
              if [ $? -ne 0 ]; then
              echo "Deployment $DEPLOYMENT failed to finish rollout."
              exit 1
              fi
              done


              # Apply the job
              kubectl apply -f 01-generate-traffic.yaml

              # Wait for the job to complete
              job_name=$(kubectl get -f 01-generate-traffic.yaml -o=jsonpath='{.metadata.name}')
              kubectl wait --for=condition=complete job/$job_name

              # Delete the job
              kubectl delete -f 01-generate-traffic.yaml

    - name: '01 - Wait for Traces'
      try:
        - script:
            timeout: 2m
            content: |
              while true; do
                ../../common/simple_trace_db_query_runner.sh 01-wait-for-trace.yaml
                if [ $? -eq 0 ]; then
                  break
                fi
              done
      catch:
        - script:
            content: |
              ../../common/simple_trace_db_query_runner.sh 01-wait-for-trace.yaml --verbose

    - name: '02 - Update workload manifest template spec'
      try:
        - apply:
            file: 02-update-workload-manifests.yaml
        - assert:
            timeout: 2m
            file: 02-assert-workload-update.yaml

    # updating the services names helps use to verify the traces, and distinguish between the phases
    # currently, we need to restart pods for service names update to take effect
    - name: '02 - Update services names and rollout deployments'
      try:
        - apply:
            file: 02-sources-reported-names.yaml
        - assert:
            timeout: 1m
            file: 02-assert-ic-service-names.yaml
        - script:
            content: kubectl rollout restart deployment -l odigos.io/e2e=test-workload

    - name: '02 - Generate Traffic'
      try:
        - script:
            timeout: 200s
            content: |
              set -e

              NAMESPACE="default"
              DEPLOYMENTS=$(kubectl get deployments -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}')


              for DEPLOYMENT in $DEPLOYMENTS; do
              echo "Waiting for deployment $DEPLOYMENT to finish rollout..."
              kubectl rollout status deployment/$DEPLOYMENT -n $NAMESPACE
              if [ $? -ne 0 ]; then
              echo "Deployment $DEPLOYMENT failed to finish rollout."
              exit 1
              fi
              done


              kubectl apply -f 01-generate-traffic.yaml
              job_name=$(kubectl get -f 01-generate-traffic.yaml -o=jsonpath='{.metadata.name}')
              kubectl wait --for=condition=complete job/$job_name
              kubectl delete -f 01-generate-traffic.yaml

    - name: '02 - Wait for Traces'
      try:
        - script:
            timeout: 2m
            content: |
              while true; do
                ../../common/simple_trace_db_query_runner.sh 02-wait-for-trace.yaml
                if [ $? -eq 0 ]; then
                  break
                fi
              done
      catch:
        - script:
            content: |
              ../../common/simple_trace_db_query_runner.sh 02-wait-for-trace.yaml --verbose

    - name: '03 - Create cluster info action'
      try:
        - apply:
            file: 03-create-action.yaml
        - assert:
            file: 03-assert-action-created.yaml

    - name: '03 - Collector config reload'
      try:
        - script:
            timeout: 200s
            content: |
              while true; do
                kubectl logs deployment.apps/odigos-gateway -n odigos-test | grep -q "Config updated"
                if [ $? -eq 0 ]; then
                  break;
                else
                  sleep 3
                fi
              done

    - name: '03 - Generate Traffic'
      try:
        - script:
            timeout: 200s
            content: |
              set -e

              NAMESPACE="default"
              DEPLOYMENTS=$(kubectl get deployments -n $NAMESPACE -o jsonpath='{.items[*].metadata.name}')


              for DEPLOYMENT in $DEPLOYMENTS; do
              echo "Waiting for deployment $DEPLOYMENT to finish rollout..."
              kubectl rollout status deployment/$DEPLOYMENT -n $NAMESPACE
              if [ $? -ne 0 ]; then
              echo "Deployment $DEPLOYMENT failed to finish rollout."
              exit 1
              fi
              done


              kubectl apply -f 01-generate-traffic.yaml
              job_name=$(kubectl get -f 01-generate-traffic.yaml -o=jsonpath='{.metadata.name}')
              kubectl wait --for=condition=complete job/$job_name
              kubectl delete -f 01-generate-traffic.yaml

    - name: '03 - Wait for Traces'
      try:
        - script:
            timeout: 2m
            content: |
              while true; do
                ../../common/simple_trace_db_query_runner.sh 03-wait-for-trace.yaml
                if [ $? -eq 0 ]; then
                  break
                fi
              done
      catch:
        - script:
            content: |
              ../../common/simple_trace_db_query_runner.sh 03-wait-for-trace.yaml --verbose
