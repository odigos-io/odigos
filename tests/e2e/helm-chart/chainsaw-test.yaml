apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: helm-chart
spec:
  description: This e2e test install Odigos via helm chart on custom namespace
  skipDelete: true
  steps:
    - name: Prepare destination
      try:
        - apply:
            file: ../../common/apply/simple-trace-db-deployment.yaml

    - name: Install - Simple Demo Apps
      try:
        - apply:
            file: ../../common/apply/install-simple-demo.yaml

    # Install Odigos with legacy field names to test backward compatibility and mirroring:
    # - Uses legacy field "memoryLimit" (instead of "limitMemoryMiB")
    # - Uses field "limitCPUm" (consistent with values.yaml)
    # - Does NOT set memory/CPU requests to test mirroring functionality
    # - Expected: requests should mirror the limit values (560Mi memory, 550m CPU)
    - name: Install Odigos
      try:
        - script:
            timeout: 3m
            content: |
              # The pwd is the directory of this file, so we have to walk up to the project root to find the helm chart
              P="../../.."
              if [ "$MODE" = "cross-cloud-tests" ]; then
                helm upgrade --install odigos $P/helm/odigos --create-namespace --namespace odigos-test \
                  --set image.tag="$COMMIT_HASH" \
                  --set imagePrefix=public.ecr.aws/y2v0v6s7 \
                  --set nodeSelector."kubernetes\.io/os"=linux \
                  --set collectorNode.memoryLimit=560 \
                  --set collectorNode.limitCPUm=550
              else
                helm upgrade --install odigos $P/helm/odigos --create-namespace --namespace odigos-test \
                  --set image.tag=e2e-test \
                  --set nodeSelector."kubernetes\.io/os"=linux \
                  --set collectorNode.memoryLimit=560 \
                  --set collectorNode.limitCPUm=550
              fi
              kubectl label namespace odigos-test odigos.io/system-object="true"
    - name: Verify Odigos Installation
      try:
        - script:
            timeout: 6m
            content: |
              echo "Starting Odigos version check..."
              export ACTUAL_VERSION=$(../../../cli/odigos version --cluster)
              echo "Actual Version: $ACTUAL_VERSION"
              echo "Commit Hash: $COMMIT_HASH"

              if [ "$MODE" = "cross-cloud-tests" ]; then
                if [ "$ACTUAL_VERSION" != "$COMMIT_HASH" ]; then
                  echo "‚ùå Odigos version is not the expected commit hash, got $ACTUAL_VERSION"
                  exit 1
                fi

              else
                if [ "$ACTUAL_VERSION" != "e2e-test" ]; then
                  echo "‚ùå Odigos version is not e2e-test, got $ACTUAL_VERSION"
                  exit 1
                fi
              fi

              ../../common/verify_odigos_installation.sh odigos-test

        - assert:
            timeout: 10s
            file: ../../common/assert/odigos-installed.yaml

    - name: Verify Backward Compatibility in helm chart fields - Legacy Fields & Mirroring
      try:
        - assert:
            timeout: 30s
            file: verify-datacollection-resources.yaml

    - name: Verify Backward Compatibility in helm chart fields - New Fields & Mirroring
      try:
        - script:
            timeout: 1m
            content: |
              echo "üöÄ Rendering Helm template for odiglet DaemonSet..."
              helm template odigos "$P/helm/odigos" \
                --set collectorNode.limitMemoryMiB=570 \
                --set collectorNode.limitCPUm=560 \
                --show-only templates/odiglet/daemonset.yaml > /tmp/helm-template-output.yaml

              echo "üìã Extracting data-collection container resources..."
              RESOURCES=$(grep -A 60 "name: data-collection" /tmp/helm-template-output.yaml | grep -A 15 "resources:" || true)

              echo "üîç Found resources section:"
              echo "$RESOURCES"

              # Helper function to normalize hidden characters and whitespace
              normalize() {
                echo "$1" | tr -d '\r' | tr -d '\n' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//'
              }

              echo "‚úÖ Verifying mirroring (requests should equal limits)..."

              # ---- MEMORY ----
              MEMORY_REQUEST_RAW=$(echo "$RESOURCES" | grep -A 2 "requests:" | grep "memory:" | awk '{print $2}')
              MEMORY_LIMIT_RAW=$(echo "$RESOURCES" | grep -A 2 "limits:" | grep "memory:" | awk '{print $2}')

              MEMORY_REQUEST=$(normalize "$MEMORY_REQUEST_RAW")
              MEMORY_LIMIT=$(normalize "$MEMORY_LIMIT_RAW")

              printf "üîç Debug: MEMORY_REQUEST_RAW=[%s], MEMORY_LIMIT_RAW=[%s]\n" "$MEMORY_REQUEST_RAW" "$MEMORY_LIMIT_RAW"
              printf "üîç Normalized: MEMORY_REQUEST=[%s], MEMORY_LIMIT=[%s]\n" "$MEMORY_REQUEST" "$MEMORY_LIMIT"

              if [[ "$MEMORY_REQUEST" == "570Mi" && "$MEMORY_LIMIT" == "570Mi" ]]; then
                echo "‚úÖ Memory mirroring works: request=$MEMORY_REQUEST, limit=$MEMORY_LIMIT"
              else
                echo "‚ùå Memory mirroring failed: request='$MEMORY_REQUEST', limit='$MEMORY_LIMIT' (expected both '570Mi')"
                exit 1
              fi

              # ---- CPU ----
              CPU_REQUEST_RAW=$(echo "$RESOURCES" | grep -A 2 "requests:" | grep "cpu:" | awk '{print $2}')
              CPU_LIMIT_RAW=$(echo "$RESOURCES" | grep -A 2 "limits:" | grep "cpu:" | awk '{print $2}')

              CPU_REQUEST=$(normalize "$CPU_REQUEST_RAW")
              CPU_LIMIT=$(normalize "$CPU_LIMIT_RAW")

              printf "üîç Debug: CPU_REQUEST_RAW=[%s], CPU_LIMIT_RAW=[%s]\n" "$CPU_REQUEST_RAW" "$CPU_LIMIT_RAW"
              printf "üîç Normalized: CPU_REQUEST=[%s], CPU_LIMIT=[%s]\n" "$CPU_REQUEST" "$CPU_LIMIT"

              if [[ "$CPU_REQUEST" == "560m" && "$CPU_LIMIT" == "560m" ]]; then
                echo "‚úÖ CPU mirroring works: request=$CPU_REQUEST, limit=$CPU_LIMIT"
              else
                echo "‚ùå CPU mirroring failed: request='$CPU_REQUEST', limit='$CPU_LIMIT' (expected both '560m')"
                exit 1
              fi

      catch:
        - script:
            content: |
              echo "üîç Listing all resources in namespace 'odigos-test'..."
              kubectl get all -n odigos-test

              echo "üìù Describing all resources in namespace 'odigos-test'..."
              kubectl describe all -n odigos-test

    - name: Verify Node Odiglet label has been added
      try:
        - assert:
            file: ../../common/assert/node-odiglet-label.yaml
    - name: Assert Trace DB is up
      try:
        - assert:
            timeout: 1m
            file: ../../common/assert/simple-trace-db-running.yaml

    - name: Add Destination
      try:
        - apply:
            file: ../../common/apply/add-simple-trace-db-destination.yaml

    - name: Assert - Simple Demo Apps Installed
      try:
        - assert:
            timeout: 3m
            file: ../../common/assert/simple-demo-installed.yaml

    - name: Instrument Namespace
      try:
        - apply:
            file: ../../common/apply/instrument-default-ns.yaml

    - name: Ruby Detected, Rollout Restart
      try:
        - assert:
            timeout: 3m
            file: ../../common/assert/ruby-partial-runtime-detected.yaml
        - script:
            timeout: 1m
            content: |
              kubectl rollout restart deployment geolocation
              kubectl wait --for=condition=ready pod -l app=geolocation --timeout=60s

    - name: Assert Runtime Detected
      try:
        - assert:
            timeout: 3m
            file: ../../common/assert/simple-demo-runtime-detected.yaml


    - name: Odigos pipeline ready
      try:
        - assert:
            timeout: 1m
            file: ../../common/assert/pipeline-ready.yaml

    - name: Simple-demo instrumented after destination added
      try:
        - assert:
            timeout: 3m
            file: ../../common/assert/simple-demo-instrumented-full.yaml

    - name: Generate Traffic
      try:
        - apply:
            file: ../../common/apply/generate-traffic-job.yaml
        - script:
            timeout: 1m
            content: |
              kubectl wait --for=condition=complete job/$(kubectl get -f ../../common/apply/generate-traffic-job.yaml -o=jsonpath='{.metadata.name}')
        - delete:
            file: ../../common/apply/generate-traffic-job.yaml

    - name: Wait For Trace
      try:
        - script:
            timeout: 1m
            content: |
              while true; do
                ../../common/simple_trace_db_query_runner.sh ../../common/queries/wait-for-trace.yaml
                if [ $? -eq 0 ]; then
                  break
                fi
                sleep 1
              done
      catch:
        - script:
            content: |
              java_pod_name=$(kubectl get pods -n default -o jsonpath="{.items[*].metadata.name}" | tr ' ' '\n' | grep ^frontend)
              kubectl logs $java_pod_name -n default

    - name: Verify Trace - Context Propagation
      try:
        - script:
            content: |
              ../../common/simple_trace_db_query_runner.sh ../../common/queries/context-propagation.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test

    - name: Verify Trace - Resource Attributes
      try:
        - script:
            content: |
              ../../common/simple_trace_db_query_runner.sh ../../common/queries/resource-attributes.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test

    - name: Verify Trace - Span Attributes
      try:
        - script:
            content: |
              ../../common/simple_trace_db_query_runner.sh ../../common/queries/span-attributes.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test

    - name: Verify collector metrics are collected by the UI
      try:
        - script:
            timeout: 5m
            content: |
              while true; do
                ../../common/assert_collector_metrics_from_ui.sh odigos-test
                if [ $? -eq 0 ]; then
                  break
                fi
                sleep 5
              done

    - name: Uninstall Odigos
      try:
        - script:
            timeout: 3m
            content: |
              helm uninstall odigos -n odigos-test

    - name: Verify Odigos Uninstallation
      try:
        - script:
            timeout: 1m
            content: |
              for i in $(seq 1 10); do
                if ../../common/assert_odigos_uninstalled.sh; then
                  exit 0
                fi
                echo "Attempt $i: Odigos uninstallation verification failed, retrying in 5 seconds..."
                sleep 5
              done

              echo "Failed to verify Odigos uninstallation after 12 attempts"
              exit 1
      catch:
        - script:
            content: |
              echo "üîç Listing all resources in namespace 'odigos-test'..."
              kubectl get all -n odigos-test

              echo "üìù Describing all resources in namespace 'odigos-test'..."
              kubectl describe all -n odigos-test
