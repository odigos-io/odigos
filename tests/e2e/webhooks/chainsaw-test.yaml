apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: source
spec:
  description: This e2e test runs a multi-apps scenario with Source instrumentation
  skipDelete: true
  steps:
    - name: Install Odigos
      try:
        - script:
            content: |
              if [ "$MODE" = "cross-cloud-tests" ]; then
                ../../../cli/odigos install --namespace odigos-test --version "$COMMIT_HASH" --image-prefix=public.ecr.aws/y2v0v6s7
              else
                ../../../cli/odigos install --namespace odigos-test --version e2e-test
              fi

              ../../common/verify_odigos_installation.sh odigos-test
            timeout: 4m
        - assert:
            file: ../../common/assert/odigos-installed.yaml
    - name: "[Defaulting] - Source without labels has labels added"
      try:
        - apply:
            file: defaulting-01-source-without-labels.yaml
        - assert:
            timeout: 2m
            file: defaulting-01-assert-source-without-labels.yaml
    - name: "[Defaulting] - Source with correct labels is unaffected"
      try:
        - apply:
            file: defaulting-02-source-with-labels.yaml
        - assert:
            timeout: 2m
            file: defaulting-02-source-with-labels.yaml
    - name: "[Defaulting/Validating] - Source with incorrect labels is rejected (not modified to be correct)"
      try:
        - apply:
            file: defaulting-03-source-with-incorrect-labels.yaml
            expect:
              - check:
                  ($error != null): true
    - name: "[Defaulting] - Normal Source has finalizer added"
      try:
        - apply:
            file: defaulting-04-finalizer.yaml
        - assert:
            timeout: 2m
            file: defaulting-04-assert-finalizer.yaml
    - name: "[Defaulting] - Normal Source updated to disableInstrumentation=true still has finalizer"
      try:
        - script:
            timeout: 70s
            content: kubectl patch source/04-finalizer --type=merge -p '{"spec":{"disableInstrumentation":true}}'
        - assert:
            timeout: 2m
            file: defaulting-04-assert-finalizer.yaml
    - name: "[Defaulting] - Finalizer does not block normal Source from being deleted"
      try:
        - script:
            timeout: 70s
            content: kubectl delete source 04-finalizer
            check:
              ($error == null): true
    - name: "[Defaulting] - Workload excluded Source has finalizer added"
      try:
        - apply:
            file: defaulting-05-disabled-finalizer.yaml
        - assert:
            timeout: 2m
            file: defaulting-05-assert-disabled-finalizer.yaml
    - name: "[Defaulting] - Workload excluded Source updated to disableInstrumentation=false still has finalizer"
      try:
        - script:
            timeout: 70s
            content: kubectl patch source/05-disabled-finalizer --type=merge -p '{"spec":{"disableInstrumentation":false}}'
        - assert:
            timeout: 2m
            file: defaulting-05-assert-enabled-finalizer.yaml
    - name: "[Defaulting] - Finalizer does not block exclusion Source from being deleted"
      try:
        - script:
            timeout: 70s
            content: kubectl delete source 05-disabled-finalizer
            check:
              ($error == null): true
    - name: "[Validating] - Normal Source passes validation"
      try:
        - apply:
            file: validating-01-normal-source.yaml
    - name: "[Validating] - Workload excluded Source passes validation"
      try:
        - apply:
            file: validating-02-excluded-source.yaml
    - name: "[Validating] - Namespace Source passes validation + Namespace Source with existing workload Source is not a duplicate (valid)"
      try:
        - apply:
            file: validating-03-namespace-source.yaml
    - name: "[Validating] - Duplicate normal Source does not pass validation"
      try:
        - apply:
            file: validating-04-duplicate-normal-source.yaml
            expect:
              - check:
                  ($error != null): true
    - name: "[Validating] - Duplicate workload excluded Source does not pass validation"
      try:
        - apply:
            file: validating-05-duplicate-excluded-source.yaml
            expect:
              - check:
                  ($error != null): true
    - name: "[Validating] - Duplicate namespace Source does not pass validation"
      try:
        - apply:
            file: validating-06-duplicate-namespace-source.yaml
            expect:
              - check:
                  ($error != null): true
    - name: "[Validating] - Workload Source with existing namespace Source is not a duplicate (valid)"
      try:
        - apply:
            file: validating-07-valid-workload-existing-ns-source.yaml
    - name: "[Validating] - Namespace Source with name!=namespace does not pass validation"
      try:
        - apply:
            file: validating-08-invalid-namespace-name-source.yaml
            expect:
              - check:
                  ($error != null): true
    - name: "[Validating] - Source with invalid kind does not pass validation"
      try:
        - apply:
            file: validating-09-invalid-workload-kind-source.yaml
            expect:
              - check:
                  ($error != null): true
    - name: "[Validating] - Source workload-kind label is immutable"
      try:
        - script:
            timeout: 70s
            content: kubectl label --overwrite source/06-normal-source odigos.io/workload-kind="Namespace"
            check:
              ($error != null): true
              (contains($stderr, 'Invalid value')): true
    - name: "[Validating] - Source workload-name label is immutable"
      try:
        - script:
            timeout: 70s
            content: kubectl label --overwrite source/06-normal-source odigos.io/workload-name="06-normal-source-patched"
            check:
              ($error != null): true
              (contains($stderr, 'Invalid value')): true
    - name: "[Validating] - Source workload-namespace label is immutable"
      try:
        - script:
            timeout: 70s
            content: kubectl label --overwrite source/06-normal-source odigos.io/workload-namespace="kube-system"
            check:
              ($error != null): true
              (contains($stderr, 'Invalid value')): true
    - name: "[Validating] - Source workload.name is immutable"
      try:
        - script:
            timeout: 70s
            content: kubectl patch source/06-normal-source --type=merge -p '{"spec":{"workload":{"name":"06-normal-source-patched"}}}'
            check:
              ($error != null): true
              (contains($stderr, 'Invalid value')): true
    - name: "[Validating] - Source workload.namespace is immutable"
      try:
        - script:
            timeout: 70s
            content: kubectl patch source/06-normal-source --type=merge -p '{"spec":{"workload":{"namespace":"kube-system"}}}'
            check:
              ($error != null): true
              (contains($stderr, 'Invalid value')): true
    - name: "[Validating] - Source workload.kind is immutable"
      try:
        - script:
            timeout: 70s
            content: kubectl patch source/06-normal-source --type=merge -p '{"spec":{"workload":{"kind":"DaemonSet"}}}'
            check:
              ($error != null): true
              (contains($stderr, 'Invalid value')): true
    - name: "[Validating] - Source namespace must match source.spec.workload.namespace"
      try:
        - apply:
            file: validating-10-namespace-workload-namespace-source.yaml
            expect:
              - check:
                  ($error != null): true
    - name: "[Validating] - Source namespace can't include a non empty spec.otelServiceName"
      try:
        - script:
            timeout: 70s
            content: kubectl patch source/08-namespace-source --type=merge -p '{"spec":{"otelServiceName":"this-should-not-be-set"}}'
            check:
              ($error != null): true
              (contains($stderr, 'Invalid value')): true
    - name: '[Migration] - Old startlangdetection finalizer is removed and migrated to new combined one'
      try:
        - apply:
            file: migration-01-source-with-old-finalizer.yaml
        - assert:
            timeout: 2m
            file: migration-01-assert-source-with-old-finalizer.yaml
    - name: '[Migration] - Old deleteinstrumentationconfig finalizer is removed and migrated to new combined one'
      try:
        - apply:
            file: migration-02-source-with-old-finalizer.yaml
        - assert:
            timeout: 2m
            file: migration-02-assert-source-with-old-finalizer.yaml
  
    - name: "[Validating] - Action with no config is invalid"
      try:
        - apply:
            file: validating-action-11-no-config.yaml
            expect:
              - check:
                  ($error != null): true
    - name: "[Validating] - Action with multiple configs is invalid"
      try:
        - apply:
            file: validating-action-12-multi-config.yaml
            expect:
              - check:
                  ($error != null): true
    - name: "[Validating] - valid AddClusterInfo"
      try:
        - apply:
            file: validating-action-13-addClusterInfo.yaml
            expect:
              - check:
                  ($error == null): true
    - name: "[Validating] - valid DeleteAttribute"
      try:
        - apply:
            file: validating-action-14-deleteAttribute.yaml
            expect:
              - check:
                  ($error == null): true
    - name: "[Validating] - valid RenameAttribute"
      try:
        - apply:
            file: validating-action-15-renameAttribute.yaml
            expect:
              - check:
                  ($error == null): true
    - name: "[Validating] - valid PiiMasking"
      try:
        - apply:
            file: validating-action-16-piiMasking.yaml
            expect:
              - check:
                  ($error == null): true