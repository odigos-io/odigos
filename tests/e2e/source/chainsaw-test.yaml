apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: source
spec:
  description: This e2e test runs a multi-apps scenario with Source instrumentation
  skipDelete: true
  steps:
    - name: Prepare destination
      try:
        - script:
            timeout: 60s
            content: |
              helm repo add grafana https://grafana.github.io/helm-charts
              helm repo update
              helm install e2e-tests grafana/tempo -n traces --create-namespace --set tempo.storage.trace.block.version=vParquet4 \
              --set tempo.ingester.trace_idle_period=5s \
              --set tempo.ingester.max_block_duration=20s \
              --version 1.10.1
        - assert:
            file: ../../common/assert/tempo-running.yaml
    - name: Wait for destination to be ready
      try:
        - script:
            timeout: 60s
            content: ../../common/wait_for_dest.sh
    - name: Install Odigos
      try:
        - script:
            content: |
              if [ "$MODE" = "cross-cloud-tests" ]; then
                ../../../cli/odigos install --namespace odigos-test --version "$COMMIT_HASH" --image-prefix=public.ecr.aws/y2v0v6s7
              else
                ../../../cli/odigos install --namespace odigos-test --version e2e-test
              fi
            timeout: 60s
        - assert:
            file: ../../common/assert/odigos-installed.yaml

    - name: Install Demo App
      try:
        - script:
            timeout: 200s
            content: |
              if [ "$MODE" != "cross-cloud-tests" ]; then
                docker pull keyval/odigos-demo-inventory:v0.1
                docker pull keyval/odigos-demo-membership:v0.1
                docker pull keyval/odigos-demo-coupon:v0.1
                docker pull keyval/odigos-demo-inventory:v0.1
                docker pull keyval/odigos-demo-frontend:v0.2
                kind load docker-image keyval/odigos-demo-inventory:v0.1
                kind load docker-image keyval/odigos-demo-membership:v0.1
                kind load docker-image keyval/odigos-demo-coupon:v0.1
                kind load docker-image keyval/odigos-demo-inventory:v0.1
                kind load docker-image keyval/odigos-demo-frontend:v0.2
              else
                echo "Skipping docker pull and kind load for cross-cloud-tests mode"
              fi
        - apply:
            file: ../../common/apply/install-simple-demo.yaml
        - script:
            timeout: 70s
            content: |
              kubectl wait --for=condition=ready pod -l app=frontend --timeout=60s
              kubectl wait --for=condition=ready pod -l app=coupon --timeout=60s
              kubectl wait --for=condition=ready pod -l app=inventory --timeout=60s
              kubectl wait --for=condition=ready pod -l app=pricing --timeout=60s
              kubectl wait --for=condition=ready pod -l app=membership --timeout=60s
        - assert:
            file: ../../common/assert/simple-demo-installed.yaml
    - name: Instrument Deployments
      try:
        - apply:
            file: 01-sources.yaml
    - name: Assert Runtime Detected
      try:
        - assert:
            timeout: 2m
            file: ../../common/assert/simple-demo-runtime-detected.yaml
    - name: Add Destination
      try:
        - apply:
            file: ../../common/apply/add-tempo-traces-destination.yaml
    - name: Odigos pipeline ready
      try:
        - assert:
            file:  ../../common/assert/pipeline-ready.yaml
    - name: Simple-demo instrumented after destination added
      try:
        - assert:
            file: ../../common/assert/simple-demo-instrumented.yaml
        - assert:
            timeout: 2m
            file: 01-workloads.yaml
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Generate Traffic
      try:
        - script:
            timeout: 500s
            content: |
              while true; do
                # wait for traces to be available
                sleep 8

                # Apply the job
                kubectl apply -f ../../common/apply/generate-traffic-job.yaml

                # Wait for the job to complete
                job_name=$(kubectl get -f ../../common/apply/generate-traffic-job.yaml -o=jsonpath='{.metadata.name}')
                kubectl wait --for=condition=complete job/$job_name

                # Delete the job        
                kubectl delete -f ../../common/apply/generate-traffic-job.yaml

                # Run the wait-for-trace script
                echo "Running TraceQL test at $(date)"
                ../../common/traceql_runner.sh tracesql/wait-for-trace.yaml
                
                if [ $? -eq 0 ]; then
                  break
                else
                  ../../common/flush_traces.sh
                  sleep 5
                fi
              done
    - name: Verify Trace - Context Propagation
      try:
        - script:
            timeout: 30s
            content: |
              ../../common/traceql_runner.sh tracesql/context-propagation.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
    - name: Verify Trace - Resource Attributes
      try:
        - script:
            content: |
              ../../common/traceql_runner.sh tracesql/resource-attributes.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
    - name: Verify Trace - Span Attributes
      try:
        - script:
            timeout: 60s
            content: |
              ../../common/traceql_runner.sh tracesql/span-attributes.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
    - name: Uninstrument individual deployments
      try:
        - script:
            timeout: 60s
            content: |
              kubectl delete sources --all
              while true; do
                ic_count=$(kubectl get instrumentationconfigs --output name | wc -l)
                if [ $ic_count -eq "0" ]; then
                  break
                fi
                sleep 5
              done
    - name: Assert workloads updated after uninstrumentation
      try:
        - assert:
            timeout: 2m
            file: 02-workloads.yaml
    - name: Update reported service name for second phase of test
      try:
        - script:
            timeout: 70s
            content: |
              kubectl annotate deployment coupon odigos.io/reported-name=coupon-2
              kubectl annotate deployment frontend odigos.io/reported-name=frontend-2
              kubectl annotate deployment inventory odigos.io/reported-name=inventory-2
              kubectl annotate deployment pricing odigos.io/reported-name=pricing-2
              kubectl annotate deployment membership odigos.io/reported-name=membership-2
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Instrument Namespace
      try:
        - apply:
            file: 02-source-ns.yaml
    - name: Assert Runtime Detected
      try:
        - assert:
            timeout: 2m
            file: ../../common/assert/simple-demo-runtime-detected.yaml
        - assert:
            timeout: 2m
            file: 03-workloads.yaml
    - name: Simple demo instrumented after runtime detection
      try:
        - assert:
            file: ../../common/assert/simple-demo-instrumented.yaml
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Generate Traffic
      try:
        - script:
            timeout: 500s
            content: |
              while true; do
                # wait for traces to be available
                sleep 8

                # Apply the job
                kubectl apply -f ../../common/apply/generate-traffic-job.yaml

                # Wait for the job to complete
                job_name=$(kubectl get -f ../../common/apply/generate-traffic-job.yaml -o=jsonpath='{.metadata.name}')
                kubectl wait --for=condition=complete job/$job_name

                # Delete the job        
                kubectl delete -f ../../common/apply/generate-traffic-job.yaml

                # Run the wait-for-trace script
                echo "Running TraceQL test at $(date)"
                ../../common/traceql_runner.sh tracesql/wait-for-trace-2.yaml
                
                if [ $? -eq 0 ]; then
                  break
                else
                  ../../common/flush_traces.sh
                  sleep 5
                fi
              done
    - name: Verify Trace - Context Propagation
      try:
        - script:
            timeout: 30s
            content: |
              ../../common/traceql_runner.sh tracesql/context-propagation-2.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
    - name: Verify Trace - Resource Attributes
      try:
        - script:
            content: |
              ../../common/traceql_runner.sh tracesql/resource-attributes.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
    - name: Verify Trace - Span Attributes
      try:
        - script:
            timeout: 60s
            content: |
              ../../common/traceql_runner.sh tracesql/span-attributes-2.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
    - name: Uninstrument namespace
      try:
        - script:
            timeout: 60s
            content: |
              kubectl delete sources --all
              while true; do
                ic_count=$(kubectl get instrumentationconfigs --output name | wc -l)
                if [ $ic_count -eq "0" ]; then
                  break
                fi
                sleep 5
              done
    - name: Assert workloads updated after uninstrumentation
      try:
        - assert:
            timeout: 2m
            file: 04-workloads.yaml
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Instrument frontend workload specifically
      try:
        - apply:
            file: 05-source.yaml
    - name: Assert Runtime Detected for single workload
      try:
        - assert:
            timeout: 2m
            file: 05-assert-runtime-detected.yaml
        - assert:
            timeout: 2m
            file: 05-workloads.yaml
    - name: Single workload instrumented after runtime detection
      try:
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Instrument rest of Namespace
      try:
        - apply:
            file: 02-source-ns.yaml
    - name: Assert Runtime Detected for all workloads
      try:
        - assert:
            timeout: 2m
            file: ../../common/assert/simple-demo-runtime-detected.yaml
        - assert:
            timeout: 2m
            file: 06-workloads.yaml
    - name: Uninstrument namespace
      try:
        - script:
            timeout: 60s
            content: |
              kubectl delete sources/default
              while true; do
                ic_count=$(kubectl get instrumentationconfigs --output name | wc -l)
                if [ $ic_count -eq "1" ]; then
                  break
                fi
                sleep 5
              done
    - name: Wait for deleted sources to roll out new revisions
      try:
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Assert Runtime still Detected for single workload
      try:
        - assert:
            timeout: 2m
            file: 05-assert-runtime-detected.yaml
        - assert:
            timeout: 2m
            file: 07-workloads.yaml
    - name: Create Workload exclusion Source for single workload
      try:
        - apply:
            file: 08-source.yaml
    - name: Instrument rest of Namespace
      try:
        - apply:
            file: 02-source-ns.yaml
    - name: Wait for created source to roll out new revisions
      try:
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Assert runtime detected for all workloads except excluded (coupon)
      try:
        - assert:
            timeout: 2m
            file: 08-assert-runtime-detected.yaml
        - assert:
            timeout: 2m
            file: 08-workloads.yaml
    - name: Assert runtime not detected for excluded (coupon)
      try:
        - script:
            content: kubectl get instrumentationconfigs/deployment-coupon
            check:
              ($error != null): true
    - name: Delete excluded workload Source
      try:
        - script:
            content: kubectl delete sources -l odigos.io/e2e=source-excluded
            check:
              ($error == null): true
    - name: Wait for deleted exclusion source to roll out new revisions
      try:
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Assert runtime detected for no-longer-excluded workload
      try:
        - assert:
            timeout: 2m
            file: ../../common/assert/simple-demo-runtime-detected.yaml
        - assert:
            timeout: 2m
            file: 08-workloads-2.yaml
    - name: Create excluded workload Source while namespace is instrumented
      try:
        - apply:
            file: 09-source.yaml
    - name: Wait for created source to roll out new revisions
      try:
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Assert runtime detected for all workloads except newly excluded (membership)
      try:
        - assert:
            timeout: 2m
            file: 09-assert-runtime-detected.yaml
        - assert:
            timeout: 2m
            file: 09-workloads.yaml
    - name: Assert runtime not detected for newly excluded (membership)
      try:
        - script:
            content: kubectl get instrumentationconfigs/deployment-membership
            check:
              ($error != null): true
    - name: Set disableInstrumentation=false on excluded Source
      try:
        - script:
            timeout: 70s
            content: kubectl patch source/membership-excluded --type=merge -p '{"spec":{"disableInstrumentation":false}}'
    - name: Wait for updated source to roll out new revisions
      try:
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Assert runtime detected for no-longer-excluded workload
      try:
        - assert:
            timeout: 2m
            file: ../../common/assert/simple-demo-runtime-detected.yaml
        - assert:
            timeout: 2m
            file: 10-workloads.yaml
    - name: Set disableInstrumentation=true on previously-excluded Source
      try:
        - script:
            timeout: 70s
            content: kubectl patch source/membership-excluded --type=merge -p '{"spec":{"disableInstrumentation":true}}'
    - name: Wait for updated source to roll out new revisions
      try:
        - script:
            timeout: 70s
            content: |
              kubectl rollout status deployment -l app=coupon
              kubectl rollout status deployment -l app=frontend
              kubectl rollout status deployment -l app=inventory
              kubectl rollout status deployment -l app=pricing
              kubectl rollout status deployment -l app=membership
    - name: Assert runtime not detected for re-excluded (membership)
      try:
        - script:
            content: kubectl get instrumentationconfigs/deployment-membership
            check:
              ($error != null): true
