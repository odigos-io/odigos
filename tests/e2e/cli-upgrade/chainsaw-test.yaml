apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: cli-upgrade
spec:
  description: Check successful upgrade from latest version of CLI
  skipDelete: true
  steps:
    - name: Prepare destination
      try:
        - apply: 
            file: ../../common/apply/simple-trace-db-deployment.yaml
    - name: Install Odigos latest release from GitHub for pre upgrade setup
      try:
        - script:
            timeout: 6m # longer timeout since the images are being pulled from dockerhub
            content: |
              #!/bin/bash

              # Define variables
              REPO_URL="https://api.github.com/repos/odigos-io/odigos/releases/latest"
              ARCH=$(uname -m) # Get the system architecture
              OS=$(uname | tr '[:upper:]' '[:lower:]') # Get the OS name in lowercase

              # Convert architecture to match GitHub naming conventions if necessary
              if [ "$ARCH" = "x86_64" ]; then
                  ARCH="amd64"
              elif [ "$ARCH" = "aarch64" ]; then
                  ARCH="arm64"
              fi

              # Fetch the release assets from GitHub API
              ASSETS_JSON=$(curl -s "$REPO_URL")

              # Find the download URL that matches the OS and architecture
              DOWNLOAD_URL=$(echo "$ASSETS_JSON" | grep "browser_download_url" | grep "$OS" | grep "$ARCH" | cut -d '"' -f 4)

              # Check if the download URL was found
              if [ -z "$DOWNLOAD_URL" ]; then
                  echo "No matching release found for OS: $OS and Architecture: $ARCH"
                  exit 1
              fi

              # Download the matched asset
              curl -L -o odigos-latest.tar.gz "$DOWNLOAD_URL"

              # Extract the downloaded file
              tar -xvzf odigos-latest.tar.gz

              # cleanup any existing installation of odigos the might be left over from previous runs while developing
              ./odigos uninstall --yes
              # Run the Odigos CLI installation
              ./odigos install --namespace odigos-test
        - assert:
            file: ../../common/assert/odigos-installed.yaml
    - name: Assert Trace DB is up
      try:
        - assert:
            timeout: 1m
            file: ../../common/assert/simple-trace-db-running.yaml
    - name: Install Demo App
      try:
        - script:
            timeout: 5m
            content: |
              docker pull registry.odigos.io/odigos-demo-inventory:v0.1
              docker pull registry.odigos.io/odigos-demo-membership:v0.1
              docker pull registry.odigos.io/odigos-demo-coupon:v0.1
              docker pull registry.odigos.io/odigos-demo-pricing:v0.1
              docker pull registry.odigos.io/odigos-demo-frontend:v0.2
              kind load docker-image registry.odigos.io/odigos-demo-inventory:v0.1
              kind load docker-image registry.odigos.io/odigos-demo-membership:v0.1
              kind load docker-image registry.odigos.io/odigos-demo-coupon:v0.1
              kind load docker-image registry.odigos.io/odigos-demo-pricing:v0.1
              kind load docker-image registry.odigos.io/odigos-demo-frontend:v0.2
        - apply:
            file: ../../common/apply/install-simple-demo.yaml
        - assert:
            file: ../../common/assert/simple-demo-installed.yaml

    - name: Instrument Namespace
      try:
        - apply:
            file: ../../common/apply/instrument-default-ns.yaml

    - name: Assert Runtime Detected
      try:
        - assert:
            timeout: 4m
            file: ../../common/assert/simple-demo-runtime-detected.yaml

    - name: Add Destination
      try:
        - apply:
            file: ../../common/apply/add-simple-trace-db-destination.yaml

    - name: Odigos pipeline pods ready
    # We make sure that the pipeline pods are ready before proceeding with the next steps
    # This is intentionally different from pipeline-ready.yaml, which checks for the pipeline CRDs
    # When adding a feature related to the pipeline, if we would use the same assert before the upgrade, the test would fail.
    # Since the version installed here is latest official one.
      try:
        - script:
            content: ../../common/assert_pipeline_pods_ready.sh
            timeout: 5m

    - name: Simple-demo instrumented after destination added
      try:
        - assert:
            file: ../../common/assert/simple-demo-instrumented.yaml

    - name: Upgrade to HEAD version with the current compiled cli
      try:
        - script:
            content: ../../../cli/odigos upgrade --version e2e-test --skip-version-check # since the tag e2e-test is not a valid semantic version, we need to bypass it with --skip-version-check
            timeout: 3m
        - assert:
            file: assert-odigos-upgraded.yaml
            timeout: 3m
      catch:
      - get:
          apiVersion: v1
          kind: Pod

    - name: Odigos pipeline ready after upgrade
      try:
        - assert:
            file:  ../../common/assert/pipeline-ready.yaml

    - name: Simple-demo instrumented after upgrade
      try:
        - assert:
            file: ../../common/assert/simple-demo-instrumented.yaml

    - name: Generate Traffic
      try:
        - script:
            timeout: 1m
            content: |
              # Apply the job
              kubectl apply -f ../../common/apply/generate-traffic-job.yaml

              # Wait for the job to complete
              job_name=$(kubectl get -f ../../common/apply/generate-traffic-job.yaml -o=jsonpath='{.metadata.name}')
              kubectl wait --for=condition=complete job/$job_name

              # Delete the job
              kubectl delete -f ../../common/apply/generate-traffic-job.yaml

              while true; do
                # wait for traces to be available
                sleep 1

                # Run the wait-for-trace script
                echo "Running Simple-trace-db query for full trace at $(date)"
                ../../common/simple_trace_db_query_runner.sh queries/wait-for-trace.yaml

                if [ $? -eq 0 ]; then
                  break
                fi
              done

    - name: Verify Trace - Context Propagation
      try:
        - script:
            content: |
              ../../common/simple_trace_db_query_runner.sh queries/context-propagation.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test

    - name: Verify Trace - Resource Attributes
      try:
        - script:
            content: |
              ../../common/simple_trace_db_query_runner.sh queries/resource-attributes.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test

    - name: Verify Trace - Span Attributes
      try:
        - script:
            content: |
              ../../common/simple_trace_db_query_runner.sh queries/span-attributes.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
