apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: cli-upgrade
spec:
  description: Check successful upgrade from latest version of CLI
  skipDelete: true
  steps:
    - name: Prepare destination
      try:
        - script:
            timeout: 60s
            content: |
              if helm status e2e-tests -n traces >/dev/null 2>&1; then
                echo "e2e-tests helm already installed, probably from previous run. Skipping..."
              else
                helm repo add grafana https://grafana.github.io/helm-charts
                helm repo update
                helm install e2e-tests grafana/tempo -n traces --create-namespace --set tempo.storage.trace.block.version=vParquet4 \
                --set tempo.ingester.trace_idle_period=5s \
                --set tempo.ingester.max_block_duration=20s \
                --version 1.10.1
              fi
        - assert:
            file: ../../common/assert/tempo-running.yaml
    - name: Wait for destination to be ready
      try:
        - script:
            timeout: 60s
            content: ../../common/wait_for_dest.sh
    - name: Install Odigos latest release from GitHub for pre upgrade setup
      try:
        - script:
            content: |
              #!/bin/bash

              # Define variables
              REPO_URL="https://api.github.com/repos/odigos-io/odigos/releases/latest"
              ARCH=$(uname -m) # Get the system architecture
              OS=$(uname | tr '[:upper:]' '[:lower:]') # Get the OS name in lowercase

              # Convert architecture to match GitHub naming conventions if necessary
              if [ "$ARCH" = "x86_64" ]; then
                  ARCH="amd64"
              elif [ "$ARCH" = "aarch64" ]; then
                  ARCH="arm64"
              fi

              # Fetch the release assets from GitHub API
              ASSETS_JSON=$(curl -s "$REPO_URL")

              # Find the download URL that matches the OS and architecture
              DOWNLOAD_URL=$(echo "$ASSETS_JSON" | grep "browser_download_url" | grep "$OS" | grep "$ARCH" | cut -d '"' -f 4)

              # Check if the download URL was found
              if [ -z "$DOWNLOAD_URL" ]; then
                  echo "No matching release found for OS: $OS and Architecture: $ARCH"
                  exit 1
              fi

              # Download the matched asset
              curl -L -o odigos-latest.tar.gz "$DOWNLOAD_URL"

              # Extract the downloaded file
              tar -xvzf odigos-latest.tar.gz

              # cleanup any existing installation of odigos the might be left over from previous runs while developing
              ./odigos uninstall --yes
              # Run the Odigos CLI installation
              ./odigos install --namespace odigos-test
            timeout: 120s # longer timeout since the images are being pulled from dockerhub
        - assert:
            file: ../../common/assert/odigos-installed.yaml
    - name: Install Demo App
      try:
        - script:
            timeout: 100s
            content: |
              docker pull keyval/odigos-demo-inventory:v0.1
              docker pull keyval/odigos-demo-membership:v0.1
              docker pull keyval/odigos-demo-coupon:v0.1
              docker pull keyval/odigos-demo-inventory:v0.1
              docker pull keyval/odigos-demo-frontend:v0.2
              kind load docker-image keyval/odigos-demo-inventory:v0.1
              kind load docker-image keyval/odigos-demo-membership:v0.1
              kind load docker-image keyval/odigos-demo-coupon:v0.1
              kind load docker-image keyval/odigos-demo-inventory:v0.1
              kind load docker-image keyval/odigos-demo-frontend:v0.2
        - apply:
            file: ../../common/apply/install-simple-demo.yaml
        - assert:
            file: ../../common/assert/simple-demo-installed.yaml
    - name: Instrument Namespace
      try:
        - apply:
            file: ../../common/apply/instrument-default-ns.yaml
    - name: Assert Runtime Detected
      try:
        - assert:
            timeout: 2m
            file: ../../common/assert/simple-demo-runtime-detected.yaml
    - name: Add Destination
      try:
        - apply:
            file: ../../common/apply/add-tempo-traces-destination.yaml
    - name: Odigos pipeline ready
      try:
        - assert:
            file:  ../../common/assert/pipeline-ready.yaml
    - name: Simple-demo instrumented after destination added
      try:
        - assert:
            file: ../../common/assert/simple-demo-instrumented.yaml
    - name: Upgrade to HEAD version with the current compiled cli
      try:
        - script:
            content: ../../../cli/odigos upgrade --version e2e-test --skip-version-check # since the tag e2e-test is not a valid semantic version, we need to bypass it with --skip-version-check
            timeout: 60s
        - assert:
            file: assert-odigos-upgraded.yaml
            timeout: 60s
      catch:
      - get:
          apiVersion: v1
          kind: Pod
    - name: Odigos pipeline ready after upgrade
      try:
        - assert:
            file:  ../../common/assert/pipeline-ready.yaml
    - name: Simple-demo instrumented after upgrade
      try:
        - assert:
            file: ../../common/assert/simple-demo-instrumented.yaml
    - name: Generate Traffic
      try:
        - script:
            timeout: 300s
            content: |
              # Apply the job
              kubectl apply -f ../../common/apply/generate-traffic-job.yaml

              # Wait for the job to complete
              job_name=$(kubectl get -f ../../common/apply/generate-traffic-job.yaml -o=jsonpath='{.metadata.name}')
              kubectl wait --for=condition=complete job/$job_name

              # Delete the job
              kubectl delete -f ../../common/apply/generate-traffic-job.yaml      

              while true; do
                # wait for traces to be available
                sleep 8

                # Run the wait-for-trace script
                echo "Running TraceQL test at $(date)"
                ../../common/traceql_runner.sh tracesql/wait-for-trace.yaml

                if [ $? -eq 0 ]; then
                  break
                else
                  ../../common/flush_traces.sh
                  sleep 5
                fi
              done
    - name: Verify Trace - Context Propagation
      try:
        - script:
            content: |
              ../../common/traceql_runner.sh tracesql/context-propagation.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
    - name: Verify Trace - Resource Attributes
      try:
        - script:
            content: |
              ../../common/traceql_runner.sh tracesql/resource-attributes.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
    - name: Verify Trace - Span Attributes
      try:
        - script:
            timeout: 60s
            content: |
              ../../common/traceql_runner.sh tracesql/span-attributes.yaml
      catch:
        - podLogs:
            name: odiglet
            namespace: odigos-test
