name: 'Create Release Candidate'

on:
  workflow_dispatch:

jobs:
  create-release-candidate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest stable version
        id: get_version
        run: |
          # Get all tags and filter for stable versions (no -rc or other suffixes)
          # Sort them and get the latest one
          LATEST_STABLE=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          echo "Latest stable version is: $LATEST_STABLE"
          echo "latest_stable=$LATEST_STABLE" >> $GITHUB_OUTPUT

      - name: Calculate next stable version
        id: next_version
        run: |
          LATEST_STABLE=${{ steps.get_version.outputs.latest_stable }}

          # Extract version components
          IFS='.' read -r major minor patch <<< "${LATEST_STABLE#v}"

          # Increment patch version
          next_patch=$((patch + 1))

          # Construct next stable version
          NEXT_STABLE="v$major.$minor.$next_patch"
          echo "Next stable version will be: $NEXT_STABLE"
          echo "next_stable=$NEXT_STABLE" >> $GITHUB_OUTPUT

      - name: Calculate RC version
        id: rc_version
        run: |
          NEXT_STABLE="${{ steps.next_version.outputs.next_stable }}"

          # Find all RC versions for the next stable version
          RC_VERSIONS=$(git tag -l "${NEXT_STABLE}-rc*" | sort -V)

          if [ -z "$RC_VERSIONS" ]; then
            # No RC versions exist, start with rc0
            RC_VERSION="${NEXT_STABLE}-rc0"
          else
            # Get the latest RC version and increment its number
            LATEST_RC=$(echo "$RC_VERSIONS" | tail -n 1)
            RC_NUM=$(echo "$LATEST_RC" | grep -oE 'rc[0-9]+' | grep -oE '[0-9]+')
            NEXT_RC_NUM=$((RC_NUM + 1))
            RC_VERSION="${NEXT_STABLE}-rc${NEXT_RC_NUM}"
          fi

          echo "Release candidate version will be: $RC_VERSION"
          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT

      - name: Create release branch if not exists
        id: create_branch
        run: |
          STABLE_RELEASE_BRANCH_NAME="releases/${{ steps.next_version.outputs.next_stable }}"
          echo "stable_release_branch_name=$STABLE_RELEASE_BRANCH_NAME" >> $GITHUB_OUTPUT
          # Escape all regex metacharacters properly
          ESCAPED_BRANCH_NAME=$(echo "$STABLE_RELEASE_BRANCH_NAME" | sed 's/[[\.*^$()+?{|/]/\\&/g')
          if ! git ls-remote --heads origin $STABLE_RELEASE_BRANCH_NAME | grep -q "^[0-9a-f]*\s*refs/heads/${ESCAPED_BRANCH_NAME}$"; then
            echo "Creating new branch $STABLE_RELEASE_BRANCH_NAME from main"
            git checkout main
            git pull origin main
            git checkout -b $STABLE_RELEASE_BRANCH_NAME
            git push origin $STABLE_RELEASE_BRANCH_NAME
          else
            echo "Branch $STABLE_RELEASE_BRANCH_NAME already exists"
            # Check out the existing branch and pull latest changes
            git checkout $STABLE_RELEASE_BRANCH_NAME
            git pull origin $STABLE_RELEASE_BRANCH_NAME
          fi

      - name: Create or Update Pre-release PR
        env:
          GH_TOKEN: ${{ secrets.RELEASE_BOT_TOKEN }}
        run: |
          # Configure Git user identity for the workflow using the actor who triggered it
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

          RELEASE_BRANCH="${{ steps.create_branch.outputs.stable_release_branch_name }}"
          PR_BRANCH="pre-releases/${{ steps.rc_version.outputs.rc_version }}"
          PR_TITLE="Pre-release PR for ${{ steps.rc_version.outputs.rc_version }}"

          # Escape all regex metacharacters properly for branch detection
          ESCAPED_PR_BRANCH=$(echo "$PR_BRANCH" | sed 's/[[\.*^$()+?{|/]/\\&/g')

          # Check if the PR branch already exists
          if git ls-remote --heads origin $PR_BRANCH | grep -q "^[0-9a-f]*\s*refs/heads/${ESCAPED_PR_BRANCH}$"; then
            echo "PR branch $PR_BRANCH already exists, updating it..."

            # Check out the existing PR branch (create local tracking branch if needed)
            if git show-ref --verify --quiet refs/heads/$PR_BRANCH; then
              git checkout $PR_BRANCH
            else
              git checkout -b $PR_BRANCH origin/$PR_BRANCH
            fi
            git pull origin $PR_BRANCH

            # Reset the branch to point to the current release branch head
            git reset --hard origin/$RELEASE_BRANCH

            # Create a new commit to trigger the PR checks
            git commit --allow-empty -m "Update pre-release for ${{ steps.rc_version.outputs.rc_version }} - $(date)"
            git push origin $PR_BRANCH --force

            echo "Updated existing PR branch $PR_BRANCH"

            # Check if PR exists for this branch, recreate if it doesn't
            if ! gh pr list --head $PR_BRANCH --json number --jq '.[0].number' | grep -q '[0-9]'; then
              echo "PR for branch $PR_BRANCH doesn't exist, creating new PR..."
              gh pr create \
                --base $RELEASE_BRANCH \
                --head $PR_BRANCH \
                --title "$PR_TITLE" \
                --body "This is an automated PR for the release candidate ${{ steps.rc_version.outputs.rc_version }}"
            else
              echo "PR for branch $PR_BRANCH already exists"
            fi
          else
            echo "Creating new PR branch $PR_BRANCH..."

            # Create a new branch for the PR
            git checkout $RELEASE_BRANCH
            git checkout -b $PR_BRANCH

            # Create empty commit
            git commit --allow-empty -m "Pre-release commit for ${{ steps.rc_version.outputs.rc_version }}"
            git push origin $PR_BRANCH

            # Create PR
            gh pr create \
              --base $RELEASE_BRANCH \
              --head $PR_BRANCH \
              --title "$PR_TITLE" \
              --body "This is an automated PR for the release candidate ${{ steps.rc_version.outputs.rc_version }}"
          fi
