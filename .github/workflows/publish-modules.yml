name: Publish Modules

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'image tag'
        required: true

jobs:
  verify-offsets:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ['enterprise-go-instrumentation']
    steps:
      - name: Verify no open offsets PRs
        id: verify
        run: |
          # Fetch open PRs and filter by "offsets" label
          result=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.RELEASE_BOT_TOKEN }}" \
            "https://api.github.com/repos/odigos-io/${{ matrix.repo }}/pulls?state=open&per_page=100")

          pr_links=$(echo "$result" \
            | jq -r '[.[] | select(.labels | any(.name == "offsets")) | .html_url] | join(" ")')

          count=$(echo "$pr_links" | wc -w)
          if [ "$count" -gt 0 ]; then
            # Write outputs to GITHUB_OUTPUT instead of using ::set-output
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "links=$pr_links" >> $GITHUB_OUTPUT
            echo "❌ Error: Open PRs with label \"offsets\" found!" >&2
            exit 1
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ No open PRs with label \"offsets\"."
          fi

      - name: Notify Slack on Success
        if: ${{ steps.verify.outputs.status == 'success' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "description": "✅ No open offset PRs in `${{ matrix.repo }}`",
            "tag": "verify-offsets-success"
          }' $SLACK_WEBHOOK_URL

      - name: Notify Slack on Failure
        if: ${{ failure() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          PR_LINKS: ${{ steps.verify.outputs.links }}
        run: |
          pr_links_formatted=$(echo "$PR_LINKS" | tr ' ' '\n' | awk '{print "- " $0}' | tr '\n' '\n')
          curl -X POST -H 'Content-type: application/json' --data "{
            \"description\": \"❌ ERROR: Open offset PRs found in \`${{ matrix.repo }}\`\n\n$pr_links_formatted\",
            \"link\": \"https://github.com/${{ env.GITHUB_REPOSITORY }}/actions/runs/${{ env.GITHUB_RUN_ID }}\",
            \"tag\": \"verify-offsets-failure\"
          }" $SLACK_WEBHOOK_URL

  verify-dependencies-sync:
    needs: verify-offsets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ['odigos-enterprise']
    steps:
      - name: Verify no open dependencies-syncer-bot PRs
        id: verify
        run: |
          # Fetch open PRs and filter by "dependencies-syncer-bot" label
          result=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.RELEASE_BOT_TOKEN }}" \
            "https://api.github.com/repos/odigos-io/${{ matrix.repo }}/pulls?state=open&per_page=100")

          pr_links=$(echo "$result" \
            | jq -r '[.[] | select(.labels | any(.name == "dependencies-syncer-bot")) | .html_url] | join(" ")')

          count=$(echo "$pr_links" | wc -w)
          if [ "$count" -gt 0 ]; then
            # Write outputs to GITHUB_OUTPUT instead of using ::set-output
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "links=$pr_links" >> $GITHUB_OUTPUT
            echo "❌ Error: Open PRs with label \"dependencies-syncer-bot\" found!" >&2
            exit 1
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ No open PRs with label \"dependencies-syncer-bot\"."
          fi

      - name: Notify Slack on Success
        if: ${{ steps.verify.outputs.status == 'success' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "description": "✅ No open dependencies-syncer-bot PRs in `${{ matrix.repo }}`",
            "tag": "verify-dependencies-sync-success"
          }' $SLACK_WEBHOOK_URL

      - name: Notify Slack on Failure
        if: ${{ failure() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          PR_LINKS: ${{ steps.verify.outputs.links }}
        run: |
          pr_links_formatted=$(echo "$PR_LINKS" | tr ' ' '\n' | awk '{print "- " $0}' | tr '\n' '\n')
          curl -X POST -H 'Content-type: application/json' --data "{
            \"description\": \"❌ ERROR: Open depenencies-syncer-bot PRs found in \`${{ matrix.repo }}\`\n\n$pr_links_formatted\",
            \"link\": \"https://github.com/${{ env.GITHUB_REPOSITORY }}/actions/runs/${{ env.GITHUB_RUN_ID }}\",
            \"tag\": \"verify-dependencies-sync-failure\"
          }" $SLACK_WEBHOOK_URL

  verify-release-blockers:
    needs: verify-dependencies-sync
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ['odigos', 'odigos-enterprise']
    steps:
      - name: Verify no open release-blocker PRs
        id: verify
        run: |
          # Fetch open PRs and filter by "release-blocker" label
          result=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.RELEASE_BOT_TOKEN }}" \
            "https://api.github.com/repos/odigos-io/${{ matrix.repo }}/pulls?state=open&per_page=100")

          pr_links=$(echo "$result" \
            | jq -r '[.[] | select(.labels | any(.name == "release-blocker")) | .html_url] | join(" ")')

          count=$(echo "$pr_links" | wc -w)
          if [ "$count" -gt 0 ]; then
            # Write outputs to GITHUB_OUTPUT instead of using ::set-output
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "links=$pr_links" >> $GITHUB_OUTPUT
            echo "❌ Error: Open PRs with label \"release-blocker\" found!" >&2
            exit 1
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ No open PRs with label \"release-blocker\"."
          fi

      - name: Notify Slack on Success
        if: ${{ steps.verify.outputs.status == 'success' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "description": "✅ No open release-blocker PRs in `${{ matrix.repo }}`",
            "tag": "verify-release-blockers-success"
          }' $SLACK_WEBHOOK_URL

      - name: Notify Slack on Failure
        if: ${{ failure() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          PR_LINKS: ${{ steps.verify.outputs.links }}
        run: |
          pr_links_formatted=$(echo "$PR_LINKS" | tr ' ' '\n' | awk '{print "- " $0}' | tr '\n' '\n')
          curl -X POST -H 'Content-type: application/json' --data "{
            \"description\": \"❌ ERROR: Open release-blocker PRs found in \`${{ matrix.repo }}\`\n\n$pr_links_formatted\",
            \"link\": \"https://github.com/${{ env.GITHUB_REPOSITORY }}/actions/runs/${{ env.GITHUB_RUN_ID }}\",
            \"tag\": \"verify-release-blockers-failure\"
          }" $SLACK_WEBHOOK_URL

  print-tag:
    needs: verify-release-blockers
    runs-on: ubuntu-latest
    steps:
      - name: Extract Tag
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Notify Slack Start
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"description":"Detected new git tag. initializing a release", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}

  tag-modules:
    needs: verify-release-blockers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Extract Tag
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Notify Modules Tagging
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"description":"Tagging odigos modules so they can be consumed as libraries", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}

      - name: tag modules
        run: |
          git tag api/${{ steps.extract_tag.outputs.tag }}
          git tag common/${{ steps.extract_tag.outputs.tag }}
          git tag instrumentation/${{ steps.extract_tag.outputs.tag }}
          git tag k8sutils/${{ steps.extract_tag.outputs.tag }}
          git tag odiglet/${{ steps.extract_tag.outputs.tag }}
          git tag opampserver/${{ steps.extract_tag.outputs.tag }}
          git tag procdiscovery/${{ steps.extract_tag.outputs.tag }}
          git tag profiles/${{ steps.extract_tag.outputs.tag }}
          git tag distros/${{ steps.extract_tag.outputs.tag }}
          git tag instrumentor/${{ steps.extract_tag.outputs.tag }}
          git push origin --tags

      - name: Trigger Release PR in Odigos Enterprise
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.RELEASE_BOT_TOKEN }}" \
          https://api.github.com/repos/odigos-io/odigos-enterprise/dispatches \
            -d '{"event_type": "create_release_pr", "client_payload": {"tag": "${{ steps.extract_tag.outputs.tag }}"}}'

      - name: Notify Slack End
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"description":"Odigos go modules tagged successfully", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: ${{ failure() || cancelled() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"link":"https://github.com/${{ env.GITHUB_REPOSITORY }}/actions/runs/${{ env.GITHUB_RUN_ID }}", "description":"ERROR: Odigos go modules release failed", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}

  publish-images:
    needs: verify-release-blockers
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      matrix:
        dockerfile: ['Dockerfile', 'Dockerfile.rhel']
        service: ['autoscaler', 'scheduler', 'instrumentor', 'collector', 'odiglet', 'ui', 'operator']
        include:
          - service: autoscaler
            runner: ubuntu-latest
            summary: 'Autoscaler for Odigos'
            description: 'Autoscaler manages the installation of Odigos components.'
          - service: scheduler
            runner: ubuntu-latest
            summary: 'Scheduler for Odigos'
            description: 'Scheduler manages the installation of OpenTelemetry Collectors with Odigos.'
          - service: instrumentor
            runner: ubuntu-latest
            summary: 'Instrumentor for Odigos'
            description: 'Instrumentor manages auto-instrumentation for workloads with Odigos.'
          - service: collector
            runner: large-runner
            summary: 'Odigos Collector'
            description: 'The Odigos build of the OpenTelemetry Collector.'
          - service: odiglet
            runner: ubuntu-latest
            summary: 'Odiglet for Odigos'
            description: 'Odiglet is the core component of Odigos managing auto-instrumentation. This image requires a root user to load and manage eBPF programs.'
          - service: ui
            runner: ubuntu-latest
            summary: 'UI for Odigos'
            description: 'UI provides the frontend webapp for managing an Odigos installation.'
          - service: operator
            runner: ubuntu-latest
            summary: 'Odigos Operator'
            description: 'The Odigos Operator installs and manages Odigos in a cluster'
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Tag
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Notify Modules Tagging
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"description":"Start building docker image for component ${{ matrix.service }}", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - id: gcp-auth
        name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          access_token_lifetime: 1200s

      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.gcp-auth.outputs.access_token }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  

      - name: Build and Push Docker Image for ${{ matrix.service }}
        uses: docker/build-push-action@v6
        env:
          ODIGOS_TAG: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || steps.extract_tag.outputs.tag}}
        with:
          push: true
          provenance: false
          tags: |
            us-central1-docker.pkg.dev/odigos-cloud/components/odigos-${{ matrix.service }}${{ matrix.dockerfile == 'Dockerfile.rhel' && '-ubi9' || '' }}:${{ env.ODIGOS_TAG }}
            keyval/odigos-${{ matrix.service }}${{ matrix.dockerfile == 'Dockerfile.rhel' && '-ubi9' || '' }}:${{ env.ODIGOS_TAG }}
            ghcr.io/odigos-io/odigos-${{ matrix.service }}${{ matrix.dockerfile == 'Dockerfile.rhel' && '-ubi9' || '' }}:${{ env.ODIGOS_TAG }}
          build-args: |
            SERVICE_NAME=${{ matrix.service }}
            ODIGOS_VERSION=${{ env.ODIGOS_TAG }}
            RELEASE=${{ env.ODIGOS_TAG }}
            VERSION=${{ env.ODIGOS_TAG }}
            SUMMARY=${{ matrix.summary }}
            DESCRIPTION=${{ matrix.description }}
            LD_FLAGS=-s -w
          platforms: linux/amd64,linux/arm64
          file: >-
            ${{ matrix.service == 'odiglet' && format('odiglet/{0}', matrix.dockerfile) ||
                matrix.service == 'collector' && format('collector/{0}', matrix.dockerfile) ||
                matrix.service == 'ui' && format('frontend/{0}', matrix.dockerfile) ||
                matrix.service == 'operator' && format('operator/{0}', matrix.dockerfile) ||
                matrix.dockerfile }}

      - name: Notify Slack End
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"description":"Odigos component ${{ matrix.service }} released successfully", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: ${{ failure() || cancelled() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"link":"https://github.com/${{ env.GITHUB_REPOSITORY }}/actions/runs/${{ env.GITHUB_RUN_ID }}", "description":"ERROR: odigos component ${{ matrix.service }} release failed", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}

  publish-collector-linux-packages:
    needs: verify-release-blockers
    runs-on: ubuntu-latest
    steps:
      - name: Extract Tag
        id: extract_tag
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Notify Slack Start
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"description":"Start releasing odigos collector as linux packages", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.extract_tag.outputs.tag }}

      - name: Install GemFury CLI
        run: |
          sudo bash -c "echo 'deb [trusted=yes] https://apt.fury.io/cli/ * *' > /etc/apt/sources.list.d/fury-cli.list"
          sudo apt-get update
          sudo apt-get install -y fury-cli

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
          workdir: collector
        env:
          FURY_ACCOUNT: ${{ secrets.FURY_ACCOUNT }}
          FURY_API_TOKEN: ${{ secrets.FURY_API_TOKEN }}

      - name: Notify Slack End
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"description":"Odigos collector linux packages released successfully", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: ${{ failure() || cancelled() }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.ODIGOS_RELEASE_STATUS_WEBHOOK_URL }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"link":"https://github.com/${{ env.GITHUB_REPOSITORY }}/actions/runs/${{ env.GITHUB_RUN_ID }}", "description":"ERROR: failed to publish odigos collector linux packages", "tag":"${{ steps.extract_tag.outputs.tag }}"}' ${{ env.SLACK_WEBHOOK_URL }}
