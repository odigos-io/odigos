name: E2E Tests

on:
  merge_group:
  pull_request:
    branches:
      - main
      - 'releases/**'


concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-cli:
    runs-on: warp-ubuntu-latest-x64-8x-spot
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "~1.24"
          check-latest: true
          cache: true
          cache-dependency-path: |
            **/go.sum

      - name: Build CLI
        run: |
          cd cli
          go build -tags=embed_manifests -o odigos

      - name: Save CLI binary to cache
        uses: WarpBuilds/cache/save@v1
        with:
          path: cli/odigos
          key: ${{ github.run_id }}-odigos-cli

  build-odigos-images:
    runs-on: warp-ubuntu-latest-x64-8x-spot
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Odigos Images
        run: |
          TAG=e2e-test make build-images
          docker save -o odigos-images.tar $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "odigos")

      - uses: ko-build/setup-ko@v0.9

      - name: Build CLI Image
        run: |
          TAG=e2e-test make build-cli-image
          docker save registry.odigos.io/odigos-cli:e2e-test -o cli-image.tar

      - name: Save Odigos images to cache
        uses: WarpBuilds/cache/save@v1
        with:
          path: |
            odigos-images.tar
            cli-image.tar
          key: ${{ github.run_id }}-odigos-images

  kubernetes-test:
    needs:
      - build-odigos-images
      - build-cli
    # workload-lifecycle test scenario requires more resources, so we use a different instance type
    # all other test scenarios use the default instance type which is free and fast
    runs-on: 'warp-ubuntu-latest-x64-8x-spot'
    strategy:
      fail-fast: false
      matrix:
        kube-version:
          - "1.20.15"
          - "1.23"
          - "1.32"
        test-scenario:
          - "ui"
          - "helm-chart"
          - "cli-upgrade"
          - "helm-upgrade"
          - "workload-lifecycle"
          - "source"
          - "webhooks"
          - "env-injection"
          - "data-streams"
          - "mount-method"
        include:
          - kube-version: "1.20.15"
            kind-image: "kindest/node:v1.20.15@sha256:a32bf55309294120616886b5338f95dd98a2f7231519c7dedcec32ba29699394"
          - kube-version: "1.23"
            kind-image: "kindest/node:v1.23.17@sha256:14d0a9a892b943866d7e6be119a06871291c517d279aedb816a4b4bc0ec0a5b3"
          - kube-version: "1.32"
            kind-image: "kindest/node:v1.32.0@sha256:2458b423d635d7b01637cac2d6de7e1c1dca1148a2ba2e90975e214ca849e7cb"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.9.0

      - name: Install chainsaw
        uses: kyverno/action-install-chainsaw@v0.2.12

      - name: Create Kind Cluster
        uses: helm/kind-action@v1.12.0
        with:
          node_image: ${{ matrix.kind-image }}
          version: "v0.25.0"
          cluster_name: kind
          config: tests/common/apply/kind-config.yaml

      - name: Restore cached Odigos images
        uses: WarpBuilds/cache/restore@v1
        with:
          path: |
            odigos-images.tar
            cli-image.tar
          key: ${{ github.run_id }}-odigos-images

      - name: Load Odigos Images to Kind Cluster
        run: |
          kind load image-archive odigos-images.tar
          kind load image-archive cli-image.tar

      - name: Restore cached CLI binary
        uses: WarpBuilds/cache/restore@v1
        with:
          path: cli/odigos
          key: ${{ github.run_id }}-odigos-cli

      - name: Move CLI binary & set permissions
        run: |
          chmod +x cli/odigos

      - name: Run E2E Tests
        run: |
          MINOR_VERSION=$(echo ${{ matrix.kube-version }} | sed -E 's/^1\.([0-9]+).*$/\1/')

          chainsaw test tests/e2e/${{ matrix.test-scenario }} --values - <<EOF
          k8sMinorVersion: ${MINOR_VERSION}
          isHelm: ${{ matrix.test-scenario == 'helm-chart' || matrix.test-scenario == 'helm-upgrade' }}
          EOF

      - name: Cluster diagnostics
        if: failure()
        run: |
          echo "==== Nodes ===="; kubectl get nodes -o wide
          echo "==== Pods (all namespaces) ===="; kubectl get pods -A -o wide
          echo "==== Events (last 10m) ===="; kubectl get events -A --sort-by=.lastTimestamp | tail -n 200
          echo "==== Deployments not ready ===="; kubectl get deploy -A | awk '$4!="0/0" && $4!=$5 {print $1,$2}' | while read ns name; do
            echo "--- describe deploy $ns/$name ---"
            kubectl describe deploy -n "$ns" "$name" || true
          done

      - name: Run diagnose command
        if: ${{ failure() && matrix.test-scenario != 'ui' }}
        run: |
          ./cli/odigos diagnose
        continue-on-error: true

      - name: Upload diagnose artifact
        if: ${{ failure() && matrix.test-scenario != 'ui' }}
        uses: actions/upload-artifact@v4
        with:
          name: run-details-${{ matrix.test-scenario }}-${{ matrix.kube-version }}
          path: odigos_debug*.tar.gz
        continue-on-error: true

      - name: Upload UI screenshots artifact
        if: ${{ failure() && matrix.test-scenario == 'ui' }}
        uses: actions/upload-artifact@v4
        with:
          name: ui-screenshots-${{ matrix.test-scenario }}-${{ matrix.kube-version }}
          path: frontend/webapp/cypress/screenshots
        continue-on-error: true

      - name: Upload UI videos artifact
        if: ${{ failure() && matrix.test-scenario == 'ui' }}
        uses: actions/upload-artifact@v4
        with:
          name: ui-videos-${{ matrix.test-scenario }}-${{ matrix.kube-version }}
          path: frontend/webapp/cypress/videos
        continue-on-error: true
