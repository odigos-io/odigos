#!/bin/bash

set -e

# Check if GitHub CLI is authenticated
if ! gh auth status >/dev/null 2>&1; then
    echo "Error: GitHub CLI is not authenticated. Please set GH_TOKEN environment variable."
    echo "Example: export GH_TOKEN=\${{ github.token }}"
    exit 1
fi

# Get the latest semantic version tag (vX.Y.Z format)
LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1) || { echo "Failed to get latest tag"; exit 1; }
echo "Latest tag: $LATEST_TAG"

# Check if there are any commits since the last tag
COMMITS_SINCE_TAG=$(git log --oneline $LATEST_TAG..HEAD | wc -l)

if [ "$COMMITS_SINCE_TAG" -eq 0 ]; then
    echo "No changes since $LATEST_TAG. Skipping release PR creation."
    exit 0
fi

echo "Found $COMMITS_SINCE_TAG commits since $LATEST_TAG"

# Calculate next version
VERSION_WITHOUT_V=${LATEST_TAG#v}
IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_WITHOUT_V"
NEW_PATCH=$((PATCH + 1))
NEXT_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"

echo "Next version: $NEXT_VERSION"

# Check if a release PR already exists
EXISTING_PR=$(gh pr list --head "release/$NEXT_VERSION" --json number --jq '.[0].number // empty' 2>/dev/null || echo "")

# Generate changelog
CHANGELOG=$(git log --oneline --no-merges $LATEST_TAG..HEAD | sed 's/^/- /')

# Create PR title and body
PR_TITLE="Release $NEXT_VERSION"
PR_BODY="## Release $NEXT_VERSION

This PR will create a new release tag \`$NEXT_VERSION\` when merged.

### Changes since $LATEST_TAG ($COMMITS_SINCE_TAG commits)

$CHANGELOG

### Auto-generated by GitHub Actions
This PR was automatically created by the release workflow."

if [ -n "$EXISTING_PR" ]; then
    echo "Updating existing release PR #$EXISTING_PR"
    if ! gh pr edit $EXISTING_PR --title "$PR_TITLE" --body "$PR_BODY"; then
        echo "Error: Failed to update PR #$EXISTING_PR"
        exit 1
    fi
    echo "Successfully updated PR #$EXISTING_PR"
    exit 0
else
    echo "Creating new release PR for $NEXT_VERSION"
    
    # Check if the branch already exists locally or remotely
    if git show-ref --verify --quiet refs/heads/release/$NEXT_VERSION 2>/dev/null || git ls-remote --heads origin release/$NEXT_VERSION | grep -q release/$NEXT_VERSION; then
        echo "Branch release/$NEXT_VERSION already exists. Checking it out and updating to latest main."
        git checkout "release/$NEXT_VERSION"
        git pull origin "release/$NEXT_VERSION" 2>/dev/null || true
        # Update the branch to latest main
        git merge main --no-edit
    else
        echo "Creating new branch release/$NEXT_VERSION"
        git checkout -b "release/$NEXT_VERSION"
    fi
    
    git push origin "release/$NEXT_VERSION"
    if ! gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base main --head "release/$NEXT_VERSION" --label "release" --label "automated"; then
        echo "Error: Failed to create PR for $NEXT_VERSION"
        exit 1
    fi
fi 
