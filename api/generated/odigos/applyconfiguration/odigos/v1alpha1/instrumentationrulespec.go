/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	k8sconsts "github.com/odigos-io/odigos/api/k8sconsts"
	instrumentationrules "github.com/odigos-io/odigos/api/odigos/v1alpha1/instrumentationrules"
)

// InstrumentationRuleSpecApplyConfiguration represents a declarative configuration of the InstrumentationRuleSpec type for use
// with apply.
type InstrumentationRuleSpecApplyConfiguration struct {
	RuleName                 *string                                             `json:"ruleName,omitempty"`
	Notes                    *string                                             `json:"notes,omitempty"`
	Disabled                 *bool                                               `json:"disabled,omitempty"`
	Workloads                *[]k8sconsts.PodWorkload                            `json:"workloads,omitempty"`
	InstrumentationLibraries *[]InstrumentationLibraryGlobalIdApplyConfiguration `json:"instrumentationLibraries,omitempty"`
	PayloadCollection        *instrumentationrules.PayloadCollection             `json:"payloadCollection,omitempty"`
	OtelSdks                 *instrumentationrules.OtelSdks                      `json:"otelSdks,omitempty"`
	OtelDistros              *instrumentationrules.OtelDistros                   `json:"otelDistros,omitempty"`
	CodeAttributes           *instrumentationrules.CodeAttributes                `json:"codeAttributes,omitempty"`
	HeadersCollection        *instrumentationrules.HttpHeadersCollection         `json:"headersCollection,omitempty"`
	TraceConfig              *instrumentationrules.TraceConfig                   `json:"traceConfig,omitempty"`
	CustomInstrumentations   *instrumentationrules.CustomInstrumentations        `json:"customInstrumentations,omitempty"`
}

// InstrumentationRuleSpecApplyConfiguration constructs a declarative configuration of the InstrumentationRuleSpec type for use with
// apply.
func InstrumentationRuleSpec() *InstrumentationRuleSpecApplyConfiguration {
	return &InstrumentationRuleSpecApplyConfiguration{}
}

// WithRuleName sets the RuleName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RuleName field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithRuleName(value string) *InstrumentationRuleSpecApplyConfiguration {
	b.RuleName = &value
	return b
}

// WithNotes sets the Notes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Notes field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithNotes(value string) *InstrumentationRuleSpecApplyConfiguration {
	b.Notes = &value
	return b
}

// WithDisabled sets the Disabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Disabled field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithDisabled(value bool) *InstrumentationRuleSpecApplyConfiguration {
	b.Disabled = &value
	return b
}

// WithWorkloads sets the Workloads field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Workloads field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithWorkloads(value []k8sconsts.PodWorkload) *InstrumentationRuleSpecApplyConfiguration {
	b.Workloads = &value
	return b
}

func (b *InstrumentationRuleSpecApplyConfiguration) ensureInstrumentationLibraryGlobalIdApplyConfigurationExists() {
	if b.InstrumentationLibraries == nil {
		b.InstrumentationLibraries = &[]InstrumentationLibraryGlobalIdApplyConfiguration{}
	}
}

// WithInstrumentationLibraries adds the given value to the InstrumentationLibraries field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the InstrumentationLibraries field.
func (b *InstrumentationRuleSpecApplyConfiguration) WithInstrumentationLibraries(values ...*InstrumentationLibraryGlobalIdApplyConfiguration) *InstrumentationRuleSpecApplyConfiguration {
	b.ensureInstrumentationLibraryGlobalIdApplyConfigurationExists()
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInstrumentationLibraries")
		}
		*b.InstrumentationLibraries = append(*b.InstrumentationLibraries, *values[i])
	}
	return b
}

// WithPayloadCollection sets the PayloadCollection field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PayloadCollection field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithPayloadCollection(value instrumentationrules.PayloadCollection) *InstrumentationRuleSpecApplyConfiguration {
	b.PayloadCollection = &value
	return b
}

// WithOtelSdks sets the OtelSdks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OtelSdks field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithOtelSdks(value instrumentationrules.OtelSdks) *InstrumentationRuleSpecApplyConfiguration {
	b.OtelSdks = &value
	return b
}

// WithOtelDistros sets the OtelDistros field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OtelDistros field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithOtelDistros(value instrumentationrules.OtelDistros) *InstrumentationRuleSpecApplyConfiguration {
	b.OtelDistros = &value
	return b
}

// WithCodeAttributes sets the CodeAttributes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CodeAttributes field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithCodeAttributes(value instrumentationrules.CodeAttributes) *InstrumentationRuleSpecApplyConfiguration {
	b.CodeAttributes = &value
	return b
}

// WithHeadersCollection sets the HeadersCollection field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HeadersCollection field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithHeadersCollection(value instrumentationrules.HttpHeadersCollection) *InstrumentationRuleSpecApplyConfiguration {
	b.HeadersCollection = &value
	return b
}

// WithTraceConfig sets the TraceConfig field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TraceConfig field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithTraceConfig(value instrumentationrules.TraceConfig) *InstrumentationRuleSpecApplyConfiguration {
	b.TraceConfig = &value
	return b
}

// WithCustomInstrumentations sets the CustomInstrumentations field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CustomInstrumentations field is set to the value of the last call.
func (b *InstrumentationRuleSpecApplyConfiguration) WithCustomInstrumentations(value instrumentationrules.CustomInstrumentations) *InstrumentationRuleSpecApplyConfiguration {
	b.CustomInstrumentations = &value
	return b
}
