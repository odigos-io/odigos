/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	common "github.com/odigos-io/odigos/common"
	v1 "k8s.io/api/core/v1"
)

// DestinationSpecApplyConfiguration represents a declarative configuration of the DestinationSpec type for use
// with apply.
type DestinationSpecApplyConfiguration struct {
	Type            *common.DestinationType      `json:"type,omitempty"`
	DestinationName *string                      `json:"destinationName,omitempty"`
	Data            map[string]string            `json:"data,omitempty"`
	SecretRef       *v1.LocalObjectReference     `json:"secretRef,omitempty"`
	Signals         []common.ObservabilitySignal `json:"signals,omitempty"`
}

// DestinationSpecApplyConfiguration constructs a declarative configuration of the DestinationSpec type for use with
// apply.
func DestinationSpec() *DestinationSpecApplyConfiguration {
	return &DestinationSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *DestinationSpecApplyConfiguration) WithType(value common.DestinationType) *DestinationSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithDestinationName sets the DestinationName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DestinationName field is set to the value of the last call.
func (b *DestinationSpecApplyConfiguration) WithDestinationName(value string) *DestinationSpecApplyConfiguration {
	b.DestinationName = &value
	return b
}

// WithData puts the entries into the Data field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Data field,
// overwriting an existing map entries in Data field with the same key.
func (b *DestinationSpecApplyConfiguration) WithData(entries map[string]string) *DestinationSpecApplyConfiguration {
	if b.Data == nil && len(entries) > 0 {
		b.Data = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Data[k] = v
	}
	return b
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *DestinationSpecApplyConfiguration) WithSecretRef(value v1.LocalObjectReference) *DestinationSpecApplyConfiguration {
	b.SecretRef = &value
	return b
}

// WithSignals adds the given value to the Signals field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Signals field.
func (b *DestinationSpecApplyConfiguration) WithSignals(values ...common.ObservabilitySignal) *DestinationSpecApplyConfiguration {
	for i := range values {
		b.Signals = append(b.Signals, values[i])
	}
	return b
}
