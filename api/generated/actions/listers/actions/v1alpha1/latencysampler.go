/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/odigos-io/odigos/api/actions/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LatencySamplerLister helps list LatencySamplers.
// All objects returned here must be treated as read-only.
type LatencySamplerLister interface {
	// List lists all LatencySamplers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LatencySampler, err error)
	// LatencySamplers returns an object that can list and get LatencySamplers.
	LatencySamplers(namespace string) LatencySamplerNamespaceLister
	LatencySamplerListerExpansion
}

// latencySamplerLister implements the LatencySamplerLister interface.
type latencySamplerLister struct {
	indexer cache.Indexer
}

// NewLatencySamplerLister returns a new LatencySamplerLister.
func NewLatencySamplerLister(indexer cache.Indexer) LatencySamplerLister {
	return &latencySamplerLister{indexer: indexer}
}

// List lists all LatencySamplers in the indexer.
func (s *latencySamplerLister) List(selector labels.Selector) (ret []*v1alpha1.LatencySampler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LatencySampler))
	})
	return ret, err
}

// LatencySamplers returns an object that can list and get LatencySamplers.
func (s *latencySamplerLister) LatencySamplers(namespace string) LatencySamplerNamespaceLister {
	return latencySamplerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LatencySamplerNamespaceLister helps list and get LatencySamplers.
// All objects returned here must be treated as read-only.
type LatencySamplerNamespaceLister interface {
	// List lists all LatencySamplers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LatencySampler, err error)
	// Get retrieves the LatencySampler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LatencySampler, error)
	LatencySamplerNamespaceListerExpansion
}

// latencySamplerNamespaceLister implements the LatencySamplerNamespaceLister
// interface.
type latencySamplerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LatencySamplers in the indexer for a given namespace.
func (s latencySamplerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LatencySampler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LatencySampler))
	})
	return ret, err
}

// Get retrieves the LatencySampler from the indexer for a given namespace and name.
func (s latencySamplerNamespaceLister) Get(name string) (*v1alpha1.LatencySampler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("latencysampler"), name)
	}
	return obj.(*v1alpha1.LatencySampler), nil
}
