/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/odigos-io/odigos/api/actions/v1alpha1"
)

// SensitiveDataTypesApplyConfiguration represents an declarative configuration of the SensitiveDataTypes type for use
// with apply.
type SensitiveDataTypesApplyConfiguration struct {
	Mask              *bool                       `json:"mask,omitempty"`
	SensitiveDataType *v1alpha1.SensitiveDataType `json:"sensitiveDataType,omitempty"`
}

// SensitiveDataTypesApplyConfiguration constructs an declarative configuration of the SensitiveDataTypes type for use with
// apply.
func SensitiveDataTypes() *SensitiveDataTypesApplyConfiguration {
	return &SensitiveDataTypesApplyConfiguration{}
}

// WithMask sets the Mask field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mask field is set to the value of the last call.
func (b *SensitiveDataTypesApplyConfiguration) WithMask(value bool) *SensitiveDataTypesApplyConfiguration {
	b.Mask = &value
	return b
}

// WithSensitiveDataType sets the SensitiveDataType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SensitiveDataType field is set to the value of the last call.
func (b *SensitiveDataTypesApplyConfiguration) WithSensitiveDataType(value v1alpha1.SensitiveDataType) *SensitiveDataTypesApplyConfiguration {
	b.SensitiveDataType = &value
	return b
}
