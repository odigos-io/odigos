/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ServiceNameFilterApplyConfiguration represents a declarative configuration of the ServiceNameFilter type for use
// with apply.
type ServiceNameFilterApplyConfiguration struct {
	ServiceName           *string  `json:"service_name,omitempty"`
	SamplingRatio         *float64 `json:"sampling_ratio,omitempty"`
	FallbackSamplingRatio *float64 `json:"fallback_sampling_ratio,omitempty"`
}

// ServiceNameFilterApplyConfiguration constructs a declarative configuration of the ServiceNameFilter type for use with
// apply.
func ServiceNameFilter() *ServiceNameFilterApplyConfiguration {
	return &ServiceNameFilterApplyConfiguration{}
}

// WithServiceName sets the ServiceName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceName field is set to the value of the last call.
func (b *ServiceNameFilterApplyConfiguration) WithServiceName(value string) *ServiceNameFilterApplyConfiguration {
	b.ServiceName = &value
	return b
}

// WithSamplingRatio sets the SamplingRatio field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SamplingRatio field is set to the value of the last call.
func (b *ServiceNameFilterApplyConfiguration) WithSamplingRatio(value float64) *ServiceNameFilterApplyConfiguration {
	b.SamplingRatio = &value
	return b
}

// WithFallbackSamplingRatio sets the FallbackSamplingRatio field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FallbackSamplingRatio field is set to the value of the last call.
func (b *ServiceNameFilterApplyConfiguration) WithFallbackSamplingRatio(value float64) *ServiceNameFilterApplyConfiguration {
	b.FallbackSamplingRatio = &value
	return b
}
