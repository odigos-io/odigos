// Copyright 2021, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// OpAMP: Open Agent Management Protocol (https://github.com/open-telemetry/opamp-spec)

// @generated by protoc-gen-es v1.9.0
// @generated from file opamp.proto (package opamp.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { KeyValue } from "./anyvalue_pb.js";

/**
 * @generated from enum opamp.proto.AgentToServerFlags
 */
export const AgentToServerFlags = /*@__PURE__*/ proto3.makeEnum(
  "opamp.proto.AgentToServerFlags",
  [
    {no: 0, name: "AgentToServerFlags_Unspecified"},
    {no: 1, name: "AgentToServerFlags_RequestInstanceUid"},
  ],
);

/**
 * @generated from enum opamp.proto.ServerToAgentFlags
 */
export const ServerToAgentFlags = /*@__PURE__*/ proto3.makeEnum(
  "opamp.proto.ServerToAgentFlags",
  [
    {no: 0, name: "ServerToAgentFlags_Unspecified"},
    {no: 1, name: "ServerToAgentFlags_ReportFullState"},
  ],
);

/**
 * @generated from enum opamp.proto.ServerCapabilities
 */
export const ServerCapabilities = /*@__PURE__*/ proto3.makeEnum(
  "opamp.proto.ServerCapabilities",
  [
    {no: 0, name: "ServerCapabilities_Unspecified"},
    {no: 1, name: "ServerCapabilities_AcceptsStatus"},
    {no: 2, name: "ServerCapabilities_OffersRemoteConfig"},
    {no: 4, name: "ServerCapabilities_AcceptsEffectiveConfig"},
    {no: 8, name: "ServerCapabilities_OffersPackages"},
    {no: 16, name: "ServerCapabilities_AcceptsPackagesStatus"},
    {no: 32, name: "ServerCapabilities_OffersConnectionSettings"},
    {no: 64, name: "ServerCapabilities_AcceptsConnectionSettingsRequest"},
  ],
);

/**
 * The type of the package, either an addon or a top-level package.
 * Status: [Beta]
 *
 * @generated from enum opamp.proto.PackageType
 */
export const PackageType = /*@__PURE__*/ proto3.makeEnum(
  "opamp.proto.PackageType",
  [
    {no: 0, name: "PackageType_TopLevel"},
    {no: 1, name: "PackageType_Addon"},
  ],
);

/**
 * @generated from enum opamp.proto.ServerErrorResponseType
 */
export const ServerErrorResponseType = /*@__PURE__*/ proto3.makeEnum(
  "opamp.proto.ServerErrorResponseType",
  [
    {no: 0, name: "ServerErrorResponseType_Unknown"},
    {no: 1, name: "ServerErrorResponseType_BadRequest"},
    {no: 2, name: "ServerErrorResponseType_Unavailable"},
  ],
);

/**
 * Status: [Beta]
 *
 * @generated from enum opamp.proto.CommandType
 */
export const CommandType = /*@__PURE__*/ proto3.makeEnum(
  "opamp.proto.CommandType",
  [
    {no: 0, name: "CommandType_Restart"},
  ],
);

/**
 * @generated from enum opamp.proto.AgentCapabilities
 */
export const AgentCapabilities = /*@__PURE__*/ proto3.makeEnum(
  "opamp.proto.AgentCapabilities",
  [
    {no: 0, name: "AgentCapabilities_Unspecified"},
    {no: 1, name: "AgentCapabilities_ReportsStatus"},
    {no: 2, name: "AgentCapabilities_AcceptsRemoteConfig"},
    {no: 4, name: "AgentCapabilities_ReportsEffectiveConfig"},
    {no: 8, name: "AgentCapabilities_AcceptsPackages"},
    {no: 16, name: "AgentCapabilities_ReportsPackageStatuses"},
    {no: 32, name: "AgentCapabilities_ReportsOwnTraces"},
    {no: 64, name: "AgentCapabilities_ReportsOwnMetrics"},
    {no: 128, name: "AgentCapabilities_ReportsOwnLogs"},
    {no: 256, name: "AgentCapabilities_AcceptsOpAMPConnectionSettings"},
    {no: 512, name: "AgentCapabilities_AcceptsOtherConnectionSettings"},
    {no: 1024, name: "AgentCapabilities_AcceptsRestartCommand"},
    {no: 2048, name: "AgentCapabilities_ReportsHealth"},
    {no: 4096, name: "AgentCapabilities_ReportsRemoteConfig"},
  ],
);

/**
 * @generated from enum opamp.proto.RemoteConfigStatuses
 */
export const RemoteConfigStatuses = /*@__PURE__*/ proto3.makeEnum(
  "opamp.proto.RemoteConfigStatuses",
  [
    {no: 0, name: "RemoteConfigStatuses_UNSET"},
    {no: 1, name: "RemoteConfigStatuses_APPLIED"},
    {no: 2, name: "RemoteConfigStatuses_APPLYING"},
    {no: 3, name: "RemoteConfigStatuses_FAILED"},
  ],
);

/**
 * The status of this package.
 * Status: [Beta]
 *
 * @generated from enum opamp.proto.PackageStatusEnum
 */
export const PackageStatusEnum = /*@__PURE__*/ proto3.makeEnum(
  "opamp.proto.PackageStatusEnum",
  [
    {no: 0, name: "PackageStatusEnum_Installed"},
    {no: 1, name: "PackageStatusEnum_InstallPending"},
    {no: 2, name: "PackageStatusEnum_Installing"},
    {no: 3, name: "PackageStatusEnum_InstallFailed"},
  ],
);

/**
 * @generated from message opamp.proto.AgentToServer
 */
export const AgentToServer = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.AgentToServer",
  () => [
    { no: 1, name: "instance_uid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "sequence_num", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "agent_description", kind: "message", T: AgentDescription },
    { no: 4, name: "capabilities", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "health", kind: "message", T: ComponentHealth },
    { no: 6, name: "effective_config", kind: "message", T: EffectiveConfig },
    { no: 7, name: "remote_config_status", kind: "message", T: RemoteConfigStatus },
    { no: 8, name: "package_statuses", kind: "message", T: PackageStatuses },
    { no: 9, name: "agent_disconnect", kind: "message", T: AgentDisconnect },
    { no: 10, name: "flags", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 11, name: "connection_settings_request", kind: "message", T: ConnectionSettingsRequest },
    { no: 12, name: "custom_capabilities", kind: "message", T: CustomCapabilities },
    { no: 13, name: "custom_message", kind: "message", T: CustomMessage },
  ],
);

/**
 * AgentDisconnect is the last message sent from the Agent to the Server. The Server
 * SHOULD forget the association of the Agent instance with the message stream.
 *
 * If the message stream is closed in the transport layer then the Server SHOULD
 * forget association of all Agent instances that were previously established for
 * this message stream using AgentConnect message, even if the corresponding
 * AgentDisconnect message were not explicitly received from the Agent.
 *
 * @generated from message opamp.proto.AgentDisconnect
 */
export const AgentDisconnect = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.AgentDisconnect",
  [],
);

/**
 * ConnectionSettingsRequest is a request from the Agent to the Server to create
 * and respond with an offer of connection settings for the Agent.
 * Status: [Development]
 *
 * @generated from message opamp.proto.ConnectionSettingsRequest
 */
export const ConnectionSettingsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.ConnectionSettingsRequest",
  () => [
    { no: 1, name: "opamp", kind: "message", T: OpAMPConnectionSettingsRequest },
  ],
);

/**
 * OpAMPConnectionSettingsRequest is a request for the Server to produce
 * a OpAMPConnectionSettings in its response.
 * Status: [Development]
 *
 * @generated from message opamp.proto.OpAMPConnectionSettingsRequest
 */
export const OpAMPConnectionSettingsRequest = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.OpAMPConnectionSettingsRequest",
  () => [
    { no: 1, name: "certificate_request", kind: "message", T: CertificateRequest },
  ],
);

/**
 * Status: [Development]
 *
 * @generated from message opamp.proto.CertificateRequest
 */
export const CertificateRequest = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.CertificateRequest",
  () => [
    { no: 1, name: "csr", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message opamp.proto.ServerToAgent
 */
export const ServerToAgent = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.ServerToAgent",
  () => [
    { no: 1, name: "instance_uid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "error_response", kind: "message", T: ServerErrorResponse },
    { no: 3, name: "remote_config", kind: "message", T: AgentRemoteConfig },
    { no: 4, name: "connection_settings", kind: "message", T: ConnectionSettingsOffers },
    { no: 5, name: "packages_available", kind: "message", T: PackagesAvailable },
    { no: 6, name: "flags", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "capabilities", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 8, name: "agent_identification", kind: "message", T: AgentIdentification },
    { no: 9, name: "command", kind: "message", T: ServerToAgentCommand },
    { no: 10, name: "custom_capabilities", kind: "message", T: CustomCapabilities },
    { no: 11, name: "custom_message", kind: "message", T: CustomMessage },
  ],
);

/**
 * The OpAMPConnectionSettings message is a collection of fields which comprise an
 * offer from the Server to the Agent to use the specified settings for OpAMP
 * connection.
 * Status: [Beta]
 *
 * @generated from message opamp.proto.OpAMPConnectionSettings
 */
export const OpAMPConnectionSettings = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.OpAMPConnectionSettings",
  () => [
    { no: 1, name: "destination_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "headers", kind: "message", T: Headers },
    { no: 3, name: "certificate", kind: "message", T: TLSCertificate },
  ],
);

/**
 * The TelemetryConnectionSettings message is a collection of fields which comprise an
 * offer from the Server to the Agent to use the specified settings for a network
 * connection to report own telemetry.
 * Status: [Beta]
 *
 * @generated from message opamp.proto.TelemetryConnectionSettings
 */
export const TelemetryConnectionSettings = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.TelemetryConnectionSettings",
  () => [
    { no: 1, name: "destination_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "headers", kind: "message", T: Headers },
    { no: 3, name: "certificate", kind: "message", T: TLSCertificate },
  ],
);

/**
 * The OtherConnectionSettings message is a collection of fields which comprise an
 * offer from the Server to the Agent to use the specified settings for a network
 * connection. It is not required that all fields in this message are specified.
 * The Server may specify only some of the fields, in which case it means that
 * the Server offers the Agent to change only those fields, while keeping the
 * rest of the fields unchanged.
 *
 * For example the Server may send a ConnectionSettings message with only the
 * certificate field set, while all other fields are unset. This means that
 * the Server wants the Agent to use a new certificate and continue sending to
 * the destination it is currently sending using the current header and other
 * settings.
 *
 * For fields which reference other messages the field is considered unset
 * when the reference is unset.
 *
 * For primitive field (string) we rely on the "flags" to describe that the
 * field is not set (this is done to overcome the limitation of old protoc
 * compilers don't generate methods that allow to check for the presence of
 * the field.
 * Status: [Beta]
 *
 * @generated from message opamp.proto.OtherConnectionSettings
 */
export const OtherConnectionSettings = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.OtherConnectionSettings",
  () => [
    { no: 1, name: "destination_endpoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "headers", kind: "message", T: Headers },
    { no: 3, name: "certificate", kind: "message", T: TLSCertificate },
    { no: 4, name: "other_settings", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

/**
 * Status: [Beta]
 *
 * @generated from message opamp.proto.Headers
 */
export const Headers = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.Headers",
  () => [
    { no: 1, name: "headers", kind: "message", T: Header, repeated: true },
  ],
);

/**
 * Status: [Beta]
 *
 * @generated from message opamp.proto.Header
 */
export const Header = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.Header",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Status: [Beta]
 *
 * The (public_key,private_key) certificate pair should be issued and
 * signed by a Certificate Authority that the destination Server recognizes.
 *
 * It is highly recommended that the private key of the CA certificate is NOT
 * stored on the destination Server otherwise compromising the Server will allow
 * a malicious actor to issue valid Server certificates which will be automatically
 * trusted by all agents and will allow the actor to trivially MITM Agent-to-Server
 * traffic of all servers that use this CA certificate for their Server-side
 * certificates.
 *
 * Alternatively the certificate may be self-signed, assuming the Server can
 * verify the certificate.
 *
 * @generated from message opamp.proto.TLSCertificate
 */
export const TLSCertificate = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.TLSCertificate",
  () => [
    { no: 1, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "private_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "ca_public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Status: [Beta]
 *
 * @generated from message opamp.proto.ConnectionSettingsOffers
 */
export const ConnectionSettingsOffers = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.ConnectionSettingsOffers",
  () => [
    { no: 1, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "opamp", kind: "message", T: OpAMPConnectionSettings },
    { no: 3, name: "own_metrics", kind: "message", T: TelemetryConnectionSettings },
    { no: 4, name: "own_traces", kind: "message", T: TelemetryConnectionSettings },
    { no: 5, name: "own_logs", kind: "message", T: TelemetryConnectionSettings },
    { no: 6, name: "other_connections", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: OtherConnectionSettings} },
  ],
);

/**
 * List of packages that the Server offers to the Agent.
 * Status: [Beta]
 *
 * @generated from message opamp.proto.PackagesAvailable
 */
export const PackagesAvailable = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.PackagesAvailable",
  () => [
    { no: 1, name: "packages", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: PackageAvailable} },
    { no: 2, name: "all_packages_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Each Agent is composed of one or more packages. A package has a name and
 * content stored in a file. The content of the files, functionality
 * provided by the packages, how they are stored and used by the Agent side is Agent
 * type-specific and is outside the concerns of the OpAMP protocol.
 *
 * If the Agent does not have an installed package with the specified name then
 * it SHOULD download it from the specified URL and install it.
 *
 * If the Agent already has an installed package with the specified name
 * but with a different hash then the Agent SHOULD download and
 * install the package again, since it is a different version of the same package.
 *
 * If the Agent has an installed package with the specified name and the same
 * hash then the Agent does not need to do anything, it already
 * has the right version of the package.
 * Status: [Beta]
 *
 * @generated from message opamp.proto.PackageAvailable
 */
export const PackageAvailable = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.PackageAvailable",
  () => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(PackageType) },
    { no: 2, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file", kind: "message", T: DownloadableFile },
    { no: 4, name: "hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * Status: [Beta]
 *
 * @generated from message opamp.proto.DownloadableFile
 */
export const DownloadableFile = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.DownloadableFile",
  () => [
    { no: 1, name: "download_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "signature", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message opamp.proto.ServerErrorResponse
 */
export const ServerErrorResponse = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.ServerErrorResponse",
  () => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(ServerErrorResponseType) },
    { no: 2, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "retry_info", kind: "message", T: RetryInfo, oneof: "Details" },
  ],
);

/**
 * @generated from message opamp.proto.RetryInfo
 */
export const RetryInfo = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.RetryInfo",
  () => [
    { no: 1, name: "retry_after_nanoseconds", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * ServerToAgentCommand is sent from the Server to the Agent to request that the Agent
 * perform a command.
 * Status: [Beta]
 *
 * @generated from message opamp.proto.ServerToAgentCommand
 */
export const ServerToAgentCommand = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.ServerToAgentCommand",
  () => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(CommandType) },
  ],
);

/**
 * @generated from message opamp.proto.AgentDescription
 */
export const AgentDescription = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.AgentDescription",
  () => [
    { no: 1, name: "identifying_attributes", kind: "message", T: KeyValue, repeated: true },
    { no: 2, name: "non_identifying_attributes", kind: "message", T: KeyValue, repeated: true },
  ],
);

/**
 * The health of the Agent and sub-components
 * Status: [Beta]
 *
 * @generated from message opamp.proto.ComponentHealth
 */
export const ComponentHealth = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.ComponentHealth",
  () => [
    { no: 1, name: "healthy", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "start_time_unix_nano", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
    { no: 3, name: "last_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status_time_unix_nano", kind: "scalar", T: 6 /* ScalarType.FIXED64 */ },
    { no: 6, name: "component_health_map", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ComponentHealth} },
  ],
);

/**
 * @generated from message opamp.proto.EffectiveConfig
 */
export const EffectiveConfig = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.EffectiveConfig",
  () => [
    { no: 1, name: "config_map", kind: "message", T: AgentConfigMap },
  ],
);

/**
 * @generated from message opamp.proto.RemoteConfigStatus
 */
export const RemoteConfigStatus = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.RemoteConfigStatus",
  () => [
    { no: 1, name: "last_remote_config_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(RemoteConfigStatuses) },
    { no: 3, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The PackageStatuses message describes the status of all packages that the Agent
 * has or was offered.
 * Status: [Beta]
 *
 * @generated from message opamp.proto.PackageStatuses
 */
export const PackageStatuses = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.PackageStatuses",
  () => [
    { no: 1, name: "packages", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: PackageStatus} },
    { no: 2, name: "server_provided_all_packages_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * The status of a single package.
 * Status: [Beta]
 *
 * @generated from message opamp.proto.PackageStatus
 */
export const PackageStatus = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.PackageStatus",
  () => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "agent_has_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "agent_has_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "server_offered_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "server_offered_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: "status", kind: "enum", T: proto3.getEnumType(PackageStatusEnum) },
    { no: 7, name: "error_message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Properties related to identification of the Agent, which can be overridden
 * by the Server if needed
 *
 * @generated from message opamp.proto.AgentIdentification
 */
export const AgentIdentification = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.AgentIdentification",
  () => [
    { no: 1, name: "new_instance_uid", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message opamp.proto.AgentRemoteConfig
 */
export const AgentRemoteConfig = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.AgentRemoteConfig",
  () => [
    { no: 1, name: "config", kind: "message", T: AgentConfigMap },
    { no: 2, name: "config_hash", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

/**
 * @generated from message opamp.proto.AgentConfigMap
 */
export const AgentConfigMap = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.AgentConfigMap",
  () => [
    { no: 1, name: "config_map", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: AgentConfigFile} },
  ],
);

/**
 * @generated from message opamp.proto.AgentConfigFile
 */
export const AgentConfigFile = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.AgentConfigFile",
  () => [
    { no: 1, name: "body", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "content_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message opamp.proto.CustomCapabilities
 */
export const CustomCapabilities = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.CustomCapabilities",
  () => [
    { no: 1, name: "capabilities", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message opamp.proto.CustomMessage
 */
export const CustomMessage = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.CustomMessage",
  () => [
    { no: 1, name: "capability", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ],
);

