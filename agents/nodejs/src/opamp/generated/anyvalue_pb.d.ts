// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is copied and modified from https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/common/v1/common.proto
// Modifications:
//  - Removal of unneeded InstrumentationLibrary and StringKeyValue messages.
//  - Change of go_package to reference a package in this repo.
//  - Removal of gogoproto usage.

// @generated by protoc-gen-es v1.9.0
// @generated from file anyvalue.proto (package opamp.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * AnyValue is used to represent any type of attribute value. AnyValue may contain a
 * primitive value such as a string or integer or it may contain an arbitrary nested
 * object containing arrays, key-value lists and primitives.
 *
 * @generated from message opamp.proto.AnyValue
 */
export declare class AnyValue extends Message<AnyValue> {
  /**
   * The value is one of the listed fields. It is valid for all values to be unspecified
   * in which case this AnyValue is considered to be "null".
   *
   * @generated from oneof opamp.proto.AnyValue.value
   */
  value: {
    /**
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: bool bool_value = 2;
     */
    value: boolean;
    case: "boolValue";
  } | {
    /**
     * @generated from field: int64 int_value = 3;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * @generated from field: double double_value = 4;
     */
    value: number;
    case: "doubleValue";
  } | {
    /**
     * @generated from field: opamp.proto.ArrayValue array_value = 5;
     */
    value: ArrayValue;
    case: "arrayValue";
  } | {
    /**
     * @generated from field: opamp.proto.KeyValueList kvlist_value = 6;
     */
    value: KeyValueList;
    case: "kvlistValue";
  } | {
    /**
     * @generated from field: bytes bytes_value = 7;
     */
    value: Uint8Array;
    case: "bytesValue";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<AnyValue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "opamp.proto.AnyValue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyValue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyValue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyValue;

  static equals(a: AnyValue | PlainMessage<AnyValue> | undefined, b: AnyValue | PlainMessage<AnyValue> | undefined): boolean;
}

/**
 * ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
 * since oneof in AnyValue does not allow repeated fields.
 *
 * @generated from message opamp.proto.ArrayValue
 */
export declare class ArrayValue extends Message<ArrayValue> {
  /**
   * Array of values. The array may be empty (contain 0 elements).
   *
   * @generated from field: repeated opamp.proto.AnyValue values = 1;
   */
  values: AnyValue[];

  constructor(data?: PartialMessage<ArrayValue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "opamp.proto.ArrayValue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArrayValue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArrayValue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArrayValue;

  static equals(a: ArrayValue | PlainMessage<ArrayValue> | undefined, b: ArrayValue | PlainMessage<ArrayValue> | undefined): boolean;
}

/**
 * KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
 * since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
 * a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
 * avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
 * are semantically equivalent.
 *
 * @generated from message opamp.proto.KeyValueList
 */
export declare class KeyValueList extends Message<KeyValueList> {
  /**
   * A collection of key/value pairs of key-value pairs. The list may be empty (may
   * contain 0 elements).
   *
   * @generated from field: repeated opamp.proto.KeyValue values = 1;
   */
  values: KeyValue[];

  constructor(data?: PartialMessage<KeyValueList>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "opamp.proto.KeyValueList";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyValueList;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyValueList;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyValueList;

  static equals(a: KeyValueList | PlainMessage<KeyValueList> | undefined, b: KeyValueList | PlainMessage<KeyValueList> | undefined): boolean;
}

/**
 * KeyValue is a key-value pair that is used to store Span attributes, Link
 * attributes, etc.
 *
 * @generated from message opamp.proto.KeyValue
 */
export declare class KeyValue extends Message<KeyValue> {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: opamp.proto.AnyValue value = 2;
   */
  value?: AnyValue;

  constructor(data?: PartialMessage<KeyValue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "opamp.proto.KeyValue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeyValue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeyValue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeyValue;

  static equals(a: KeyValue | PlainMessage<KeyValue> | undefined, b: KeyValue | PlainMessage<KeyValue> | undefined): boolean;
}

