// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is copied and modified from https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/common/v1/common.proto
// Modifications:
//  - Removal of unneeded InstrumentationLibrary and StringKeyValue messages.
//  - Change of go_package to reference a package in this repo.
//  - Removal of gogoproto usage.

// @generated by protoc-gen-es v1.9.0
// @generated from file anyvalue.proto (package opamp.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";

/**
 * AnyValue is used to represent any type of attribute value. AnyValue may contain a
 * primitive value such as a string or integer or it may contain an arbitrary nested
 * object containing arrays, key-value lists and primitives.
 *
 * @generated from message opamp.proto.AnyValue
 */
export const AnyValue = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.AnyValue",
  () => [
    { no: 1, name: "string_value", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "bool_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 3, name: "int_value", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 4, name: "double_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "value" },
    { no: 5, name: "array_value", kind: "message", T: ArrayValue, oneof: "value" },
    { no: 6, name: "kvlist_value", kind: "message", T: KeyValueList, oneof: "value" },
    { no: 7, name: "bytes_value", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "value" },
  ],
);

/**
 * ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
 * since oneof in AnyValue does not allow repeated fields.
 *
 * @generated from message opamp.proto.ArrayValue
 */
export const ArrayValue = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.ArrayValue",
  () => [
    { no: 1, name: "values", kind: "message", T: AnyValue, repeated: true },
  ],
);

/**
 * KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
 * since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
 * a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
 * avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
 * are semantically equivalent.
 *
 * @generated from message opamp.proto.KeyValueList
 */
export const KeyValueList = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.KeyValueList",
  () => [
    { no: 1, name: "values", kind: "message", T: KeyValue, repeated: true },
  ],
);

/**
 * KeyValue is a key-value pair that is used to store Span attributes, Link
 * attributes, etc.
 *
 * @generated from message opamp.proto.KeyValue
 */
export const KeyValue = /*@__PURE__*/ proto3.makeMessageType(
  "opamp.proto.KeyValue",
  () => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "message", T: AnyValue },
  ],
);

